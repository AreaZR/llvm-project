; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=instcombine %s -o - | FileCheck %s

%Complex = type { double, double }

; Check that instcombine preserves TBAA when narrowing loads
define double @teststructextract(ptr %val) {
; CHECK-LABEL: define double @teststructextract(
; CHECK-SAME: ptr [[VAL:%.*]]) {
; CHECK-NEXT:    [[LOADED_UNPACK:%.*]] = load double, ptr [[VAL]], align 8, !tbaa [[TBAA0:![0-9]+]]
; CHECK-NEXT:    ret double [[LOADED_UNPACK]]
;
  %loaded = load %Complex, ptr %val, !tbaa !1
  %real = extractvalue %Complex %loaded, 0
  ret double %real
}

define double @testarrayextract(ptr %val) {
; CHECK-LABEL: define double @testarrayextract(
; CHECK-SAME: ptr [[VAL:%.*]]) {
; CHECK-NEXT:    [[LOADED_UNPACK:%.*]] = load double, ptr [[VAL]], align 8, !tbaa [[TBAA0]]
; CHECK-NEXT:    ret double [[LOADED_UNPACK]]
;
  %loaded = load [2 x double], ptr %val, !tbaa !1
  %real = extractvalue [2 x double] %loaded, 0
  ret double %real
}

; Check that inscombine preserves TBAA when breaking up stores
define void @teststructinsert(ptr %loc, double %a, double %b) {
; CHECK-LABEL: define void @teststructinsert(
; CHECK-SAME: ptr [[LOC:%.*]], double [[A:%.*]], double [[B:%.*]]) {
; CHECK-NEXT:    store double [[A]], ptr [[LOC]], align 8, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[LOC_REPACK1:%.*]] = getelementptr inbounds i8, ptr [[LOC]], i64 8
; CHECK-NEXT:    store double [[B]], ptr [[LOC_REPACK1]], align 8, !tbaa [[TBAA0]]
; CHECK-NEXT:    ret void
;
  %inserted  = insertvalue %Complex undef,      double %a, 0
  %inserted2 = insertvalue %Complex %inserted,  double %b, 1
  store %Complex %inserted2, ptr %loc, !tbaa !1
  ret void
}

define void @testarrayinsert(ptr %loc, double %a, double %b) {
; CHECK-LABEL: define void @testarrayinsert(
; CHECK-SAME: ptr [[LOC:%.*]], double [[A:%.*]], double [[B:%.*]]) {
; CHECK-NEXT:    store double [[A]], ptr [[LOC]], align 8, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[LOC_REPACK1:%.*]] = getelementptr inbounds i8, ptr [[LOC]], i64 8
; CHECK-NEXT:    store double [[B]], ptr [[LOC_REPACK1]], align 8, !tbaa [[TBAA0]]
; CHECK-NEXT:    ret void
;
  %inserted  = insertvalue [2 x double] undef,      double %a, 0
  %inserted2 = insertvalue [2 x double] %inserted,  double %b, 1
  store [2 x double] %inserted2, ptr %loc, !tbaa !1
  ret void
}

!0 = !{!"tbaa_root"}
!1 = !{!2, !2, i64 0}
!2 = !{!"Complex", !0, i64 0}
;.
; CHECK: [[TBAA0]] = !{[[META1:![0-9]+]], [[META1]], i64 0}
; CHECK: [[META1]] = !{!"Complex", [[META2:![0-9]+]], i64 0}
; CHECK: [[META2]] = !{!"tbaa_root"}
;.
