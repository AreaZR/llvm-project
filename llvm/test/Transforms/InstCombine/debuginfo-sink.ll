; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt  %s -passes=instcombine -S | FileCheck %s

; Test sinking of dbg.values when instcombine sinks associated instructions.

declare void @llvm.dbg.value(metadata, metadata, metadata)

; This GEP is sunk, but can be folded into a DIExpression. Check that it
; gets folded. The dbg.value should be duplicated in the block its sunk
; into, to maximise liveness.
;

define i32 @foo(ptr %a) !dbg !7 {
; CHECK-LABEL: define i32 @foo(
; CHECK-SAME: ptr [[A:%.*]]) !dbg [[DBG6:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:      #dbg_value(ptr [[A]], [[META11:![0-9]+]], !DIExpression(DW_OP_plus_uconst, 4, DW_OP_stack_value), [[META12:![0-9]+]])
; CHECK-NEXT:    br label %[[SINK1:.*]]
; CHECK:       [[SINK1]]:
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr i8, ptr [[A]], i64 4
; CHECK-NEXT:      #dbg_value(ptr [[GEP]], [[META11]], !DIExpression(), [[META12]])
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[GEP]], align 4, !dbg [[META12]]
; CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[META12]]
;
entry:
  %gep = getelementptr i32, ptr %a, i32 1
  call void @llvm.dbg.value(metadata ptr %gep, metadata !16, metadata !12), !dbg !15
  br label %sink1

sink1:
  %0 = load i32, ptr %gep, align 4, !dbg !15
  ret i32 %0, !dbg !15
}

; In this example the GEP cannot (yet) be salvaged. Check that not only is the
; dbg.value sunk, but an undef dbg.value is left to terminate any earlier
; value range.


define i32 @bar(ptr %a, i32 %b) !dbg !70 {
; CHECK-LABEL: define i32 @bar(
; CHECK-SAME: ptr [[A:%.*]], i32 [[B:%.*]]) !dbg [[DBG13:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:      #dbg_value(ptr poison, [[META16:![0-9]+]], !DIExpression(), [[META17:![0-9]+]])
; CHECK-NEXT:    br label %[[SINK2:.*]]
; CHECK:       [[SINK2]]:
; CHECK-NEXT:    [[TMP0:%.*]] = sext i32 [[B]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[GEP_IDX:%.*]] = shl i64 [[TMP2]], 4
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr i8, ptr [[A]], i64 [[GEP_IDX]]
; CHECK-NEXT:      #dbg_value(ptr [[GEP]], [[META16]], !DIExpression(), [[META17]])
; CHECK-NEXT:    [[TMP3:%.*]] = load <vscale x 4 x i32>, ptr [[GEP]], align 16
; CHECK-NEXT:    [[EXTRACT:%.*]] = extractelement <vscale x 4 x i32> [[TMP3]], i64 1
; CHECK-NEXT:    ret i32 [[EXTRACT]]
;
entry:
  %gep = getelementptr <vscale x 4 x i32>, ptr %a, i32 %b
  call void @llvm.dbg.value(metadata ptr %gep, metadata !73, metadata !12), !dbg !74
  br label %sink2

sink2:
  %0 = load <vscale x 4 x i32>, ptr %gep
  %extract = extractelement <vscale x 4 x i32> %0, i32 1
  ret i32 %extract
}

; This GEP is sunk, and has multiple debug uses in the same block. Check that
; only the last use is cloned into the sunk block, and that both of the
; original dbg.values are salvaged.
;

define i32 @baz(ptr %a) !dbg !80 {
; CHECK-LABEL: define i32 @baz(
; CHECK-SAME: ptr [[A:%.*]]) !dbg [[DBG18:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:      #dbg_value(ptr [[A]], [[META19:![0-9]+]], !DIExpression(DW_OP_plus_uconst, 4, DW_OP_stack_value), [[META20:![0-9]+]])
; CHECK-NEXT:      #dbg_value(ptr [[A]], [[META19]], !DIExpression(DW_OP_plus_uconst, 9, DW_OP_stack_value), [[META21:![0-9]+]])
; CHECK-NEXT:    br label %[[SINK1:.*]]
; CHECK:       [[SINK1]]:
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr i8, ptr [[A]], i64 4
; CHECK-NEXT:      #dbg_value(ptr [[GEP]], [[META19]], !DIExpression(DW_OP_plus_uconst, 5), [[META21]])
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[GEP]], align 4, !dbg [[META21]]
; CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[META21]]
;
entry:
  %gep = getelementptr i32, ptr %a, i32 1
  call void @llvm.dbg.value(metadata ptr %gep, metadata !83, metadata !12), !dbg !84
  call void @llvm.dbg.value(metadata ptr %gep, metadata !83, metadata !DIExpression(DW_OP_plus_uconst, 5)), !dbg !85
  br label %sink1

sink1:
  %0 = load i32, ptr %gep, align 4, !dbg !85
  ret i32 %0, !dbg !85
}

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug)
!1 = !DIFile(filename: "a.c", directory: ".")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"PIC Level", i32 2}
!6 = !{!"clang"}
!7 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 2, type: !8, isLocal: false, isDefinition: true, scopeLine: 3, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)
!8 = !DISubroutineType(types: !9)
!9 = !{!10, !10}
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !DILocalVariable(name: "j", scope: !7, file: !1, line: 2, type: !10)
!12 = !DIExpression()
!15 = !DILocation(line: 5, column: 3, scope: !7)
!16 = !DILocalVariable(name: "h", scope: !7, file: !1, line: 4, type: !10)
!70 = distinct !DISubprogram(name: "bar", scope: !1, file: !1, line: 2, type: !71, isLocal: false, isDefinition: true, scopeLine: 3, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)
!71 = !DISubroutineType(types: !72)
!72 = !{!10, !10, !10}
!73 = !DILocalVariable(name: "k", scope: !70, file: !1, line: 2, type: !10)
!74 = !DILocation(line: 5, column: 3, scope: !70)
!80 = distinct !DISubprogram(name: "baz", scope: !1, file: !1, line: 2, type: !8, isLocal: false, isDefinition: true, scopeLine: 3, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)
!83 = !DILocalVariable(name: "l", scope: !80, file: !1, line: 2, type: !10)
!84 = !DILocation(line: 5, column: 3, scope: !80)
!85 = !DILocation(line: 6, column: 3, scope: !80)
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C99, file: [[META1:![0-9]+]], producer: "clang", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug)
; CHECK: [[META1]] = !DIFile(filename: "a.c", directory: {{.*}})
; CHECK: [[DBG6]] = distinct !DISubprogram(name: "foo", scope: [[META1]], file: [[META1]], line: 2, type: [[META7:![0-9]+]], scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META10:![0-9]+]])
; CHECK: [[META7]] = !DISubroutineType(types: [[META8:![0-9]+]])
; CHECK: [[META8]] = !{[[META9:![0-9]+]], [[META9]]}
; CHECK: [[META9]] = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
; CHECK: [[META10]] = !{}
; CHECK: [[META11]] = !DILocalVariable(name: "h", scope: [[DBG6]], file: [[META1]], line: 4, type: [[META9]])
; CHECK: [[META12]] = !DILocation(line: 5, column: 3, scope: [[DBG6]])
; CHECK: [[DBG13]] = distinct !DISubprogram(name: "bar", scope: [[META1]], file: [[META1]], line: 2, type: [[META14:![0-9]+]], scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META10]])
; CHECK: [[META14]] = !DISubroutineType(types: [[META15:![0-9]+]])
; CHECK: [[META15]] = !{[[META9]], [[META9]], [[META9]]}
; CHECK: [[META16]] = !DILocalVariable(name: "k", scope: [[DBG13]], file: [[META1]], line: 2, type: [[META9]])
; CHECK: [[META17]] = !DILocation(line: 5, column: 3, scope: [[DBG13]])
; CHECK: [[DBG18]] = distinct !DISubprogram(name: "baz", scope: [[META1]], file: [[META1]], line: 2, type: [[META7]], scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: [[META0]], retainedNodes: [[META10]])
; CHECK: [[META19]] = !DILocalVariable(name: "l", scope: [[DBG18]], file: [[META1]], line: 2, type: [[META9]])
; CHECK: [[META20]] = !DILocation(line: 5, column: 3, scope: [[DBG18]])
; CHECK: [[META21]] = !DILocation(line: 6, column: 3, scope: [[DBG18]])
;.
