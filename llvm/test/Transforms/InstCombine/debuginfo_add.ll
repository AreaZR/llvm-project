; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=instcombine %s -o - -S | FileCheck %s
; RUN: opt -passes=instcombine %s -o - -S --try-experimental-debuginfo-iterators | FileCheck %s
; typedef struct v *v_t;
; struct v {
;   unsigned long long p;
; };
;
; void f(v_t object, unsigned long long *start) {
;   unsigned head_size;
;   unsigned long long orig_start;
;   unsigned long long offset;
;   orig_start = *start;
;   for (offset = orig_start - (unsigned long long)(1 << 12); head_size;
;        offset -= (unsigned long long)(1 << 12), head_size -= (1 << 12))
;     use(offset, (object));
; }
source_filename = "test.i"
target datalayout = "e-m:o-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32"
target triple = "thumbv7s-apple-ios5.0.0"

%struct.vm_object = type { i64 }

; Function Attrs: nounwind ssp
define void @f(ptr %object, ptr nocapture readonly %start, i1 %c1) local_unnamed_addr #0 !dbg !11 {
; CHECK-LABEL: define void @f(
; CHECK-SAME: ptr [[OBJECT:%.*]], ptr nocapture readonly [[START:%.*]], i1 [[C1:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] !dbg [[DBG11:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:      #dbg_value(ptr [[OBJECT]], [[META21:![0-9]+]], !DIExpression(), [[META27:![0-9]+]])
; CHECK-NEXT:      #dbg_value(ptr [[START]], [[META22:![0-9]+]], !DIExpression(), [[META28:![0-9]+]])
; CHECK-NEXT:      #dbg_value(i64 poison, [[META25:![0-9]+]], !DIExpression(), [[META29:![0-9]+]])
; CHECK-NEXT:      #dbg_value(i64 poison, [[META26:![0-9]+]], !DIExpression(DW_OP_constu, 4096, DW_OP_minus, DW_OP_stack_value), [[META30:![0-9]+]])
; CHECK-NEXT:      #dbg_value(i32 undef, [[META23:![0-9]+]], !DIExpression(), [[META31:![0-9]+]])
; CHECK-NEXT:    br i1 [[C1]], label %[[FOR_END:.*]], label %[[FOR_BODY_LR_PH:.*]], !dbg [[META31]]
; CHECK:       [[FOR_BODY_LR_PH]]:
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[START]], align 4, !dbg [[DBG33:![0-9]+]]
; CHECK-NEXT:      #dbg_value(i64 [[TMP0]], [[META25]], !DIExpression(), [[META29]])
; CHECK-NEXT:      #dbg_value(i64 [[TMP0]], [[META26]], !DIExpression(DW_OP_constu, 4096, DW_OP_minus, DW_OP_stack_value), [[META30]])
; CHECK-NEXT:      #dbg_value(i64 [[TMP0]], [[META26]], !DIExpression(DW_OP_constu, 4096, DW_OP_minus, DW_OP_stack_value), [[META30]])
; CHECK-NEXT:    br label %[[FOR_BODY:.*]], !dbg [[META31]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[OFFSET_010_IN:%.*]] = phi i64 [ [[TMP0]], %[[FOR_BODY_LR_PH]] ], [ [[OFFSET_010:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[HEAD_SIZE_09:%.*]] = phi i32 [ poison, %[[FOR_BODY_LR_PH]] ], [ [[SUB2:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[OFFSET_010]] = add i64 [[OFFSET_010_IN]], -4096
; CHECK-NEXT:      #dbg_value(i32 [[HEAD_SIZE_09]], [[META23]], !DIExpression(), [[META30]])
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @use(i64 [[OFFSET_010]], ptr [[OBJECT]]) #[[ATTR1:[0-9]+]], !dbg [[DBG34:![0-9]+]]
; CHECK-NEXT:    [[SUB2]] = add i32 [[HEAD_SIZE_09]], -4096, !dbg [[DBG37:![0-9]+]]
; CHECK-NEXT:      #dbg_value(i64 [[OFFSET_010]], [[META26]], !DIExpression(DW_OP_constu, 4096, DW_OP_minus, DW_OP_stack_value), [[META29]])
; CHECK-NEXT:      #dbg_value(i32 [[SUB2]], [[META23]], !DIExpression(), [[META30]])
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp eq i32 [[SUB2]], 0, !dbg [[META31]]
; CHECK-NEXT:    br i1 [[TOBOOL]], label %[[FOR_END]], label %[[FOR_BODY]], !dbg [[META31]], !llvm.loop [[LOOP38:![0-9]+]]
; CHECK:       [[FOR_END]]:
; CHECK-NEXT:    ret void, !dbg [[DBG40:![0-9]+]]
;
entry:
  tail call void @llvm.dbg.value(metadata ptr %object, metadata !21, metadata !DIExpression()), !dbg !27
  tail call void @llvm.dbg.value(metadata ptr %start, metadata !22, metadata !DIExpression()), !dbg !28
  %0 = load i64, ptr %start, align 4, !dbg !29
  tail call void @llvm.dbg.value(metadata i64 %0, metadata !25, metadata !DIExpression()), !dbg !30
  %offset.08 = add i64 %0, -4096
  tail call void @llvm.dbg.value(metadata i64 %offset.08, metadata !26, metadata !DIExpression()), !dbg !31
  tail call void @llvm.dbg.value(metadata i32 undef, metadata !23, metadata !DIExpression()), !dbg !32
  br i1 %c1, label %for.end, label %for.body.lr.ph, !dbg !32

for.body.lr.ph:                                   ; preds = %entry
  ; The 'load' and the 'add' are sunken to this basic block. So let's verify that the related dbg.values are sunken as well.
  ; The add is later eliminated, so we verify that the dbg.value is salvaged by using DW_OP_minus.
  br label %for.body, !dbg !32

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %offset.010 = phi i64 [ %offset.08, %for.body.lr.ph ], [ %offset.0, %for.body ]
  %head_size.09 = phi i32 [ poison, %for.body.lr.ph ], [ %sub2, %for.body ]
  tail call void @llvm.dbg.value(metadata i32 %head_size.09, metadata !23, metadata !DIExpression()), !dbg !31
  %call = tail call i32 @use(i64 %offset.010, ptr %object) #3, !dbg !34
  %sub2 = add i32 %head_size.09, -4096, !dbg !37
  %offset.0 = add i64 %offset.010, -4096
  tail call void @llvm.dbg.value(metadata i64 %offset.0, metadata !26, metadata !DIExpression()), !dbg !30
  tail call void @llvm.dbg.value(metadata i32 %sub2, metadata !23, metadata !DIExpression()), !dbg !31
  %tobool = icmp eq i32 %sub2, 0, !dbg !32
  br i1 %tobool, label %for.end, label %for.body, !dbg !32, !llvm.loop !38

for.end:                                          ; preds = %for.body, %entry
  ret void, !dbg !40
}

declare i32 @use(...) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { nounwind ssp }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nobuiltin }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7, !8, !9}
!llvm.ident = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 6.0.0 (trunk 317434) (llvm/trunk 317437)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3)
!1 = !DIFile(filename: "test.i", directory: "/Data/radar/31209283")
!2 = !{}
!3 = !{!4}
!4 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!5 = !{i32 2, !"Dwarf Version", i32 2}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 1, !"min_enum_size", i32 4}
!9 = !{i32 7, !"PIC Level", i32 2}
!10 = !{!"clang version 6.0.0 (trunk 317434) (llvm/trunk 317437)"}
!11 = distinct !DISubprogram(name: "f", scope: !1, file: !1, line: 6, type: !12, isLocal: false, isDefinition: true, scopeLine: 6, flags: DIFlagPrototyped, isOptimized: true, unit: !0, retainedNodes: !20)
!12 = !DISubroutineType(types: !13)
!13 = !{null, !14, !19}
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "v_t", file: !1, line: 1, baseType: !15)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 32)
!16 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "v", file: !1, line: 2, size: 64, elements: !17)
!17 = !{!18}
!18 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !16, file: !1, line: 3, baseType: !4, size: 64)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 32)
!20 = !{!21, !22, !23, !25, !26}
!21 = !DILocalVariable(name: "object", arg: 1, scope: !11, file: !1, line: 6, type: !14)
!22 = !DILocalVariable(name: "start", arg: 2, scope: !11, file: !1, line: 6, type: !19)
!23 = !DILocalVariable(name: "head_size", scope: !11, file: !1, line: 7, type: !24)
!24 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!25 = !DILocalVariable(name: "orig_start", scope: !11, file: !1, line: 8, type: !4)
!26 = !DILocalVariable(name: "offset", scope: !11, file: !1, line: 9, type: !4)
!27 = !DILocation(line: 6, column: 20, scope: !11)
!28 = !DILocation(line: 6, column: 48, scope: !11)
!29 = !DILocation(line: 8, column: 22, scope: !11)
!30 = !DILocation(line: 7, column: 12, scope: !11)
!31 = !DILocation(line: 10, column: 16, scope: !11)
!32 = !DILocation(line: 11, column: 5, scope: !33)
!33 = distinct !DILexicalBlock(scope: !11, file: !1, line: 11, column: 5)
!34 = !DILocation(line: 13, column: 7, scope: !35)
!35 = distinct !DILexicalBlock(scope: !36, file: !1, line: 12, column: 75)
!36 = distinct !DILexicalBlock(scope: !33, file: !1, line: 11, column: 5)
!37 = !DILocation(line: 12, column: 61, scope: !36)
!38 = distinct !{!38, !32, !39}
!39 = !DILocation(line: 14, column: 3, scope: !33)
!40 = !DILocation(line: 15, column: 1, scope: !11)
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C99, file: [[META1:![0-9]+]], producer: "{{.*}}clang version {{.*}} (llvm/trunk 317437)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: [[META2:![0-9]+]], retainedTypes: [[META3:![0-9]+]])
; CHECK: [[META1]] = !DIFile(filename: "test.i", directory: {{.*}})
; CHECK: [[META2]] = !{}
; CHECK: [[META3]] = !{[[META4:![0-9]+]]}
; CHECK: [[META4]] = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
; CHECK: [[DBG11]] = distinct !DISubprogram(name: "f", scope: [[META1]], file: [[META1]], line: 6, type: [[META12:![0-9]+]], scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META20:![0-9]+]])
; CHECK: [[META12]] = !DISubroutineType(types: [[META13:![0-9]+]])
; CHECK: [[META13]] = !{null, [[META14:![0-9]+]], [[META19:![0-9]+]]}
; CHECK: [[META14]] = !DIDerivedType(tag: DW_TAG_typedef, name: "v_t", file: [[META1]], line: 1, baseType: [[META15:![0-9]+]])
; CHECK: [[META15]] = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: [[META16:![0-9]+]], size: 32)
; CHECK: [[META16]] = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "v", file: [[META1]], line: 2, size: 64, elements: [[META17:![0-9]+]])
; CHECK: [[META17]] = !{[[META18:![0-9]+]]}
; CHECK: [[META18]] = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: [[META16]], file: [[META1]], line: 3, baseType: [[META4]], size: 64)
; CHECK: [[META19]] = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: [[META4]], size: 32)
; CHECK: [[META20]] = !{[[META21]], [[META22]], [[META23]], [[META25]], [[META26]]}
; CHECK: [[META21]] = !DILocalVariable(name: "object", arg: 1, scope: [[DBG11]], file: [[META1]], line: 6, type: [[META14]])
; CHECK: [[META22]] = !DILocalVariable(name: "start", arg: 2, scope: [[DBG11]], file: [[META1]], line: 6, type: [[META19]])
; CHECK: [[META23]] = !DILocalVariable(name: "head_size", scope: [[DBG11]], file: [[META1]], line: 7, type: [[META24:![0-9]+]])
; CHECK: [[META24]] = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
; CHECK: [[META25]] = !DILocalVariable(name: "orig_start", scope: [[DBG11]], file: [[META1]], line: 8, type: [[META4]])
; CHECK: [[META26]] = !DILocalVariable(name: "offset", scope: [[DBG11]], file: [[META1]], line: 9, type: [[META4]])
; CHECK: [[META27]] = !DILocation(line: 6, column: 20, scope: [[DBG11]])
; CHECK: [[META28]] = !DILocation(line: 6, column: 48, scope: [[DBG11]])
; CHECK: [[META29]] = !DILocation(line: 7, column: 12, scope: [[DBG11]])
; CHECK: [[META30]] = !DILocation(line: 10, column: 16, scope: [[DBG11]])
; CHECK: [[META31]] = !DILocation(line: 11, column: 5, scope: [[META32:![0-9]+]])
; CHECK: [[META32]] = distinct !DILexicalBlock(scope: [[DBG11]], file: [[META1]], line: 11, column: 5)
; CHECK: [[DBG33]] = !DILocation(line: 8, column: 22, scope: [[DBG11]])
; CHECK: [[DBG34]] = !DILocation(line: 13, column: 7, scope: [[META35:![0-9]+]])
; CHECK: [[META35]] = distinct !DILexicalBlock(scope: [[META36:![0-9]+]], file: [[META1]], line: 12, column: 75)
; CHECK: [[META36]] = distinct !DILexicalBlock(scope: [[META32]], file: [[META1]], line: 11, column: 5)
; CHECK: [[DBG37]] = !DILocation(line: 12, column: 61, scope: [[META36]])
; CHECK: [[LOOP38]] = distinct !{[[LOOP38]], [[META31]], [[META39:![0-9]+]]}
; CHECK: [[META39]] = !DILocation(line: 14, column: 3, scope: [[META32]])
; CHECK: [[DBG40]] = !DILocation(line: 15, column: 1, scope: [[DBG11]])
;.
