; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=instcombine -S < %s | FileCheck %s


@.str = private constant [3 x i8] c"%c\00"

define void @foo() nounwind ssp !dbg !0 {
; CHECK-LABEL: define void @foo(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] !dbg [[DBG4:![0-9]+]] {
; CHECK-NEXT:    [[PUTCHAR:%.*]] = call i32 @putchar(i32 97), !dbg [[DBG7:![0-9]+]]
; CHECK-NEXT:    ret void, !dbg [[DBG9:![0-9]+]]
;
  %1 = call i32 (ptr, ...) @printf(ptr @.str, i32 97), !dbg !5
  ret void, !dbg !7
}

declare i32 @printf(ptr, ...)

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!10}

!0 = distinct !DISubprogram(name: "foo", line: 4, isLocal: false, isDefinition: true, virtualIndex: 6, isOptimized: false, unit: !2, file: !8, scope: !1, type: !3)
!1 = !DIFile(filename: "m.c", directory: "/private/tmp")
!2 = distinct !DICompileUnit(language: DW_LANG_C99, producer: "clang", isOptimized: true, emissionKind: FullDebug, file: !8, enums: !{}, retainedTypes: !{})
!3 = !DISubroutineType(types: !4)
!4 = !{null}
!5 = !DILocation(line: 5, column: 2, scope: !6)
!6 = distinct !DILexicalBlock(line: 4, column: 12, file: !8, scope: !0)
!7 = !DILocation(line: 6, column: 1, scope: !6)
!8 = !DIFile(filename: "m.c", directory: "/private/tmp")
!10 = !{i32 1, !"Debug Info Version", i32 3}
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C99, file: [[META1:![0-9]+]], producer: "clang", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: [[META2:![0-9]+]], retainedTypes: [[META2]])
; CHECK: [[META1]] = !DIFile(filename: "m.c", directory: {{.*}})
; CHECK: [[META2]] = !{}
; CHECK: [[DBG4]] = distinct !DISubprogram(name: "foo", scope: [[META1]], file: [[META1]], line: 4, type: [[META5:![0-9]+]], virtualIndex: 6, spFlags: DISPFlagDefinition, unit: [[META0]])
; CHECK: [[META5]] = !DISubroutineType(types: [[META6:![0-9]+]])
; CHECK: [[META6]] = !{null}
; CHECK: [[DBG7]] = !DILocation(line: 5, column: 2, scope: [[META8:![0-9]+]])
; CHECK: [[META8]] = distinct !DILexicalBlock(scope: [[DBG4]], file: [[META1]], line: 4, column: 12)
; CHECK: [[DBG9]] = !DILocation(line: 6, column: 1, scope: [[META8]])
;.
