; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=debugify,instcombine -S | FileCheck %s
; RUN: opt < %s -passes=debugify,instcombine -S --try-experimental-debuginfo-iterators | FileCheck %s

declare void @escape32(i32)

define i64 @test_sext_zext(i16 %A) {
; CHECK-LABEL: define i64 @test_sext_zext(
; CHECK-SAME: i16 [[A:%.*]]) !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:    [[C2:%.*]] = zext i16 [[A]] to i64, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:      #dbg_value(i64 [[C2]], [[META9:![0-9]+]], !DIExpression(), [[META14:![0-9]+]])
; CHECK-NEXT:      #dbg_value(i64 [[C2]], [[META11:![0-9]+]], !DIExpression(), [[DBG13]])
; CHECK-NEXT:    ret i64 [[C2]], !dbg [[DBG15:![0-9]+]]
;
  %c1 = zext i16 %A to i32
  %c2 = sext i32 %c1 to i64
  ret i64 %c2
}

define i64 @test_used_sext_zext(i16 %A) {
; CHECK-LABEL: define i64 @test_used_sext_zext(
; CHECK-SAME: i16 [[A:%.*]]) !dbg [[DBG16:![0-9]+]] {
; CHECK-NEXT:    [[C1:%.*]] = zext i16 [[A]] to i32, !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:      #dbg_value(i32 [[C1]], [[META18:![0-9]+]], !DIExpression(), [[DBG20]])
; CHECK-NEXT:    [[C2:%.*]] = zext i16 [[A]] to i64, !dbg [[DBG21:![0-9]+]]
; CHECK-NEXT:      #dbg_value(i64 [[C2]], [[META19:![0-9]+]], !DIExpression(), [[DBG21]])
; CHECK-NEXT:    call void @escape32(i32 [[C1]]), !dbg [[DBG22:![0-9]+]]
; CHECK-NEXT:    ret i64 [[C2]], !dbg [[DBG23:![0-9]+]]
;
  %c1 = zext i16 %A to i32
  %c2 = sext i32 %c1 to i64
  call void @escape32(i32 %c1)
  ret i64 %c2
}

define i32 @test_cast_select(i1 %cond) {
; CHECK-LABEL: define i32 @test_cast_select(
; CHECK-SAME: i1 [[COND:%.*]]) !dbg [[DBG24:![0-9]+]] {
; CHECK-NEXT:    [[CAST:%.*]] = select i1 [[COND]], i32 3, i32 5, !dbg [[DBG29:![0-9]+]]
; CHECK-NEXT:      #dbg_value(i32 [[CAST]], [[META26:![0-9]+]], !DIExpression(), [[META30:![0-9]+]])
; CHECK-NEXT:      #dbg_value(i32 [[CAST]], [[META28:![0-9]+]], !DIExpression(), [[DBG29]])
; CHECK-NEXT:    ret i32 [[CAST]], !dbg [[DBG31:![0-9]+]]
;
  %sel = select i1 %cond, i16 3, i16 5
  %cast = zext i16 %sel to i32
  ret i32 %cast
}

define void @test_or(i64 %A) {
; CHECK-LABEL: define void @test_or(
; CHECK-SAME: i64 [[A:%.*]]) !dbg [[DBG32:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i64 [[A]], [[META34:![0-9]+]], !DIExpression(DW_OP_constu, 256, DW_OP_or, DW_OP_stack_value), [[META35:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG36:![0-9]+]]
;
  %1 = or i64 %A, 256
  ret void
}

define void @test_xor(i32 %A) {
; CHECK-LABEL: define void @test_xor(
; CHECK-SAME: i32 [[A:%.*]]) !dbg [[DBG37:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i32 [[A]], [[META39:![0-9]+]], !DIExpression(DW_OP_constu, 1, DW_OP_xor, DW_OP_stack_value), [[META40:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG41:![0-9]+]]
;
  %1 = xor i32 %A, 1
  ret void
}

define void @test_sub_neg(i64 %A) {
; CHECK-LABEL: define void @test_sub_neg(
; CHECK-SAME: i64 [[A:%.*]]) !dbg [[DBG42:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i64 [[A]], [[META44:![0-9]+]], !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value), [[META45:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG46:![0-9]+]]
;
  %1 = sub i64 %A, -1
  ret void
}

define void @test_sub_pos(i64 %A) {
; CHECK-LABEL: define void @test_sub_pos(
; CHECK-SAME: i64 [[A:%.*]]) !dbg [[DBG47:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i64 [[A]], [[META49:![0-9]+]], !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value), [[META50:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG51:![0-9]+]]
;
  %1 = sub i64 %A, 1
  ret void
}

define void @test_shl(i64 %A) {
; CHECK-LABEL: define void @test_shl(
; CHECK-SAME: i64 [[A:%.*]]) !dbg [[DBG52:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i64 [[A]], [[META54:![0-9]+]], !DIExpression(DW_OP_constu, 7, DW_OP_shl, DW_OP_stack_value), [[META55:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG56:![0-9]+]]
;
  %1 = shl i64 %A, 7
  ret void
}

define void @test_lshr(i64 %A) {
; CHECK-LABEL: define void @test_lshr(
; CHECK-SAME: i64 [[A:%.*]]) !dbg [[DBG57:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i64 [[A]], [[META59:![0-9]+]], !DIExpression(DW_OP_constu, 7, DW_OP_shr, DW_OP_stack_value), [[META60:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG61:![0-9]+]]
;
  %1 = lshr i64 %A, 7
  ret void
}

define void @test_ashr(i64 %A) {
; CHECK-LABEL: define void @test_ashr(
; CHECK-SAME: i64 [[A:%.*]]) !dbg [[DBG62:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i64 [[A]], [[META64:![0-9]+]], !DIExpression(DW_OP_constu, 7, DW_OP_shra, DW_OP_stack_value), [[META65:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG66:![0-9]+]]
;
  %1 = ashr i64 %A, 7
  ret void
}

define void @test_mul(i64 %A) {
; CHECK-LABEL: define void @test_mul(
; CHECK-SAME: i64 [[A:%.*]]) !dbg [[DBG67:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i64 [[A]], [[META69:![0-9]+]], !DIExpression(DW_OP_constu, 7, DW_OP_mul, DW_OP_stack_value), [[META70:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG71:![0-9]+]]
;
  %1 = mul i64 %A, 7
  ret void
}

define void @test_sdiv(i64 %A) {
; CHECK-LABEL: define void @test_sdiv(
; CHECK-SAME: i64 [[A:%.*]]) !dbg [[DBG72:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i64 [[A]], [[META74:![0-9]+]], !DIExpression(DW_OP_constu, 7, DW_OP_div, DW_OP_stack_value), [[META75:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG76:![0-9]+]]
;
  %1 = sdiv i64 %A, 7
  ret void
}

define void @test_srem(i64 %A) {
; CHECK-LABEL: define void @test_srem(
; CHECK-SAME: i64 [[A:%.*]]) !dbg [[DBG77:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i64 [[A]], [[META79:![0-9]+]], !DIExpression(DW_OP_constu, 7, DW_OP_mod, DW_OP_stack_value), [[META80:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG81:![0-9]+]]
;
  %1 = srem i64 %A, 7
  ret void
}

define void @test_ptrtoint(ptr %P) {
; CHECK-LABEL: define void @test_ptrtoint(
; CHECK-SAME: ptr [[P:%.*]]) !dbg [[DBG82:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(ptr [[P]], [[META84:![0-9]+]], !DIExpression(), [[META85:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG86:![0-9]+]]
;
  %1 = ptrtoint ptr %P to i64
  ret void
}

define void @test_and(i64 %A) {
; CHECK-LABEL: define void @test_and(
; CHECK-SAME: i64 [[A:%.*]]) !dbg [[DBG87:![0-9]+]] {
; CHECK-NEXT:      #dbg_value(i64 [[A]], [[META89:![0-9]+]], !DIExpression(DW_OP_constu, 256, DW_OP_and, DW_OP_stack_value), [[META90:![0-9]+]])
; CHECK-NEXT:    ret void, !dbg [[DBG91:![0-9]+]]
;
  %1 = and i64 %A, 256
  ret void
}
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C, file: [[META1:![0-9]+]], producer: "debugify", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
; CHECK: [[META1]] = !DIFile(filename: "<stdin>", directory: {{.*}})
; CHECK: [[DBG5]] = distinct !DISubprogram(name: "test_sext_zext", linkageName: "test_sext_zext", scope: null, file: [[META1]], line: 1, type: [[META6:![0-9]+]], scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META8:![0-9]+]])
; CHECK: [[META6]] = !DISubroutineType(types: [[META7:![0-9]+]])
; CHECK: [[META7]] = !{}
; CHECK: [[META8]] = !{[[META9]], [[META11]]}
; CHECK: [[META9]] = !DILocalVariable(name: "1", scope: [[DBG5]], file: [[META1]], line: 1, type: [[META10:![0-9]+]])
; CHECK: [[META10]] = !DIBasicType(name: "ty32", size: 32, encoding: DW_ATE_unsigned)
; CHECK: [[META11]] = !DILocalVariable(name: "2", scope: [[DBG5]], file: [[META1]], line: 2, type: [[META12:![0-9]+]])
; CHECK: [[META12]] = !DIBasicType(name: "ty64", size: 64, encoding: DW_ATE_unsigned)
; CHECK: [[DBG13]] = !DILocation(line: 2, column: 1, scope: [[DBG5]])
; CHECK: [[META14]] = !DILocation(line: 1, column: 1, scope: [[DBG5]])
; CHECK: [[DBG15]] = !DILocation(line: 3, column: 1, scope: [[DBG5]])
; CHECK: [[DBG16]] = distinct !DISubprogram(name: "test_used_sext_zext", linkageName: "test_used_sext_zext", scope: null, file: [[META1]], line: 4, type: [[META6]], scopeLine: 4, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META17:![0-9]+]])
; CHECK: [[META17]] = !{[[META18]], [[META19]]}
; CHECK: [[META18]] = !DILocalVariable(name: "3", scope: [[DBG16]], file: [[META1]], line: 4, type: [[META10]])
; CHECK: [[META19]] = !DILocalVariable(name: "4", scope: [[DBG16]], file: [[META1]], line: 5, type: [[META12]])
; CHECK: [[DBG20]] = !DILocation(line: 4, column: 1, scope: [[DBG16]])
; CHECK: [[DBG21]] = !DILocation(line: 5, column: 1, scope: [[DBG16]])
; CHECK: [[DBG22]] = !DILocation(line: 6, column: 1, scope: [[DBG16]])
; CHECK: [[DBG23]] = !DILocation(line: 7, column: 1, scope: [[DBG16]])
; CHECK: [[DBG24]] = distinct !DISubprogram(name: "test_cast_select", linkageName: "test_cast_select", scope: null, file: [[META1]], line: 8, type: [[META6]], scopeLine: 8, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META25:![0-9]+]])
; CHECK: [[META25]] = !{[[META26]], [[META28]]}
; CHECK: [[META26]] = !DILocalVariable(name: "5", scope: [[DBG24]], file: [[META1]], line: 8, type: [[META27:![0-9]+]])
; CHECK: [[META27]] = !DIBasicType(name: "ty16", size: 16, encoding: DW_ATE_unsigned)
; CHECK: [[META28]] = !DILocalVariable(name: "6", scope: [[DBG24]], file: [[META1]], line: 9, type: [[META10]])
; CHECK: [[DBG29]] = !DILocation(line: 9, column: 1, scope: [[DBG24]])
; CHECK: [[META30]] = !DILocation(line: 8, column: 1, scope: [[DBG24]])
; CHECK: [[DBG31]] = !DILocation(line: 10, column: 1, scope: [[DBG24]])
; CHECK: [[DBG32]] = distinct !DISubprogram(name: "test_or", linkageName: "test_or", scope: null, file: [[META1]], line: 11, type: [[META6]], scopeLine: 11, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META33:![0-9]+]])
; CHECK: [[META33]] = !{[[META34]]}
; CHECK: [[META34]] = !DILocalVariable(name: "7", scope: [[DBG32]], file: [[META1]], line: 11, type: [[META12]])
; CHECK: [[META35]] = !DILocation(line: 11, column: 1, scope: [[DBG32]])
; CHECK: [[DBG36]] = !DILocation(line: 12, column: 1, scope: [[DBG32]])
; CHECK: [[DBG37]] = distinct !DISubprogram(name: "test_xor", linkageName: "test_xor", scope: null, file: [[META1]], line: 13, type: [[META6]], scopeLine: 13, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META38:![0-9]+]])
; CHECK: [[META38]] = !{[[META39]]}
; CHECK: [[META39]] = !DILocalVariable(name: "8", scope: [[DBG37]], file: [[META1]], line: 13, type: [[META10]])
; CHECK: [[META40]] = !DILocation(line: 13, column: 1, scope: [[DBG37]])
; CHECK: [[DBG41]] = !DILocation(line: 14, column: 1, scope: [[DBG37]])
; CHECK: [[DBG42]] = distinct !DISubprogram(name: "test_sub_neg", linkageName: "test_sub_neg", scope: null, file: [[META1]], line: 15, type: [[META6]], scopeLine: 15, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META43:![0-9]+]])
; CHECK: [[META43]] = !{[[META44]]}
; CHECK: [[META44]] = !DILocalVariable(name: "9", scope: [[DBG42]], file: [[META1]], line: 15, type: [[META12]])
; CHECK: [[META45]] = !DILocation(line: 15, column: 1, scope: [[DBG42]])
; CHECK: [[DBG46]] = !DILocation(line: 16, column: 1, scope: [[DBG42]])
; CHECK: [[DBG47]] = distinct !DISubprogram(name: "test_sub_pos", linkageName: "test_sub_pos", scope: null, file: [[META1]], line: 17, type: [[META6]], scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META48:![0-9]+]])
; CHECK: [[META48]] = !{[[META49]]}
; CHECK: [[META49]] = !DILocalVariable(name: "10", scope: [[DBG47]], file: [[META1]], line: 17, type: [[META12]])
; CHECK: [[META50]] = !DILocation(line: 17, column: 1, scope: [[DBG47]])
; CHECK: [[DBG51]] = !DILocation(line: 18, column: 1, scope: [[DBG47]])
; CHECK: [[DBG52]] = distinct !DISubprogram(name: "test_shl", linkageName: "test_shl", scope: null, file: [[META1]], line: 19, type: [[META6]], scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META53:![0-9]+]])
; CHECK: [[META53]] = !{[[META54]]}
; CHECK: [[META54]] = !DILocalVariable(name: "11", scope: [[DBG52]], file: [[META1]], line: 19, type: [[META12]])
; CHECK: [[META55]] = !DILocation(line: 19, column: 1, scope: [[DBG52]])
; CHECK: [[DBG56]] = !DILocation(line: 20, column: 1, scope: [[DBG52]])
; CHECK: [[DBG57]] = distinct !DISubprogram(name: "test_lshr", linkageName: "test_lshr", scope: null, file: [[META1]], line: 21, type: [[META6]], scopeLine: 21, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META58:![0-9]+]])
; CHECK: [[META58]] = !{[[META59]]}
; CHECK: [[META59]] = !DILocalVariable(name: "12", scope: [[DBG57]], file: [[META1]], line: 21, type: [[META12]])
; CHECK: [[META60]] = !DILocation(line: 21, column: 1, scope: [[DBG57]])
; CHECK: [[DBG61]] = !DILocation(line: 22, column: 1, scope: [[DBG57]])
; CHECK: [[DBG62]] = distinct !DISubprogram(name: "test_ashr", linkageName: "test_ashr", scope: null, file: [[META1]], line: 23, type: [[META6]], scopeLine: 23, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META63:![0-9]+]])
; CHECK: [[META63]] = !{[[META64]]}
; CHECK: [[META64]] = !DILocalVariable(name: "13", scope: [[DBG62]], file: [[META1]], line: 23, type: [[META12]])
; CHECK: [[META65]] = !DILocation(line: 23, column: 1, scope: [[DBG62]])
; CHECK: [[DBG66]] = !DILocation(line: 24, column: 1, scope: [[DBG62]])
; CHECK: [[DBG67]] = distinct !DISubprogram(name: "test_mul", linkageName: "test_mul", scope: null, file: [[META1]], line: 25, type: [[META6]], scopeLine: 25, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META68:![0-9]+]])
; CHECK: [[META68]] = !{[[META69]]}
; CHECK: [[META69]] = !DILocalVariable(name: "14", scope: [[DBG67]], file: [[META1]], line: 25, type: [[META12]])
; CHECK: [[META70]] = !DILocation(line: 25, column: 1, scope: [[DBG67]])
; CHECK: [[DBG71]] = !DILocation(line: 26, column: 1, scope: [[DBG67]])
; CHECK: [[DBG72]] = distinct !DISubprogram(name: "test_sdiv", linkageName: "test_sdiv", scope: null, file: [[META1]], line: 27, type: [[META6]], scopeLine: 27, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META73:![0-9]+]])
; CHECK: [[META73]] = !{[[META74]]}
; CHECK: [[META74]] = !DILocalVariable(name: "15", scope: [[DBG72]], file: [[META1]], line: 27, type: [[META12]])
; CHECK: [[META75]] = !DILocation(line: 27, column: 1, scope: [[DBG72]])
; CHECK: [[DBG76]] = !DILocation(line: 28, column: 1, scope: [[DBG72]])
; CHECK: [[DBG77]] = distinct !DISubprogram(name: "test_srem", linkageName: "test_srem", scope: null, file: [[META1]], line: 29, type: [[META6]], scopeLine: 29, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META78:![0-9]+]])
; CHECK: [[META78]] = !{[[META79]]}
; CHECK: [[META79]] = !DILocalVariable(name: "16", scope: [[DBG77]], file: [[META1]], line: 29, type: [[META12]])
; CHECK: [[META80]] = !DILocation(line: 29, column: 1, scope: [[DBG77]])
; CHECK: [[DBG81]] = !DILocation(line: 30, column: 1, scope: [[DBG77]])
; CHECK: [[DBG82]] = distinct !DISubprogram(name: "test_ptrtoint", linkageName: "test_ptrtoint", scope: null, file: [[META1]], line: 31, type: [[META6]], scopeLine: 31, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META83:![0-9]+]])
; CHECK: [[META83]] = !{[[META84]]}
; CHECK: [[META84]] = !DILocalVariable(name: "17", scope: [[DBG82]], file: [[META1]], line: 31, type: [[META12]])
; CHECK: [[META85]] = !DILocation(line: 31, column: 1, scope: [[DBG82]])
; CHECK: [[DBG86]] = !DILocation(line: 32, column: 1, scope: [[DBG82]])
; CHECK: [[DBG87]] = distinct !DISubprogram(name: "test_and", linkageName: "test_and", scope: null, file: [[META1]], line: 33, type: [[META6]], scopeLine: 33, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META88:![0-9]+]])
; CHECK: [[META88]] = !{[[META89]]}
; CHECK: [[META89]] = !DILocalVariable(name: "18", scope: [[DBG87]], file: [[META1]], line: 33, type: [[META12]])
; CHECK: [[META90]] = !DILocation(line: 33, column: 1, scope: [[DBG87]])
; CHECK: [[DBG91]] = !DILocation(line: 34, column: 1, scope: [[DBG87]])
;.
