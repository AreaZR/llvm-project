; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; Verify that calls to known stdio library functions declared with
; incompatible signatures are handled gracefully and without aborting.
;
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

declare i32 @fwrite(ptr, i64, i64, ptr)
declare i8 @fputc(ptr, ptr)

declare void @printf(ptr)
declare i8 @fprintf(ptr, ptr)
declare i8 @sprintf(ptr, ptr)


@ca1 = constant [1 x i8] c"1"
@pcnt_s = constant [3 x i8] c"%s\00"


; Verify that a call to fwrite isn't transformed into one to fputc when
; the latter is declared with an incompatible signature (which might
; trigger an abort).

define void @call_fwrite(ptr %fp) {
; CHECK-LABEL: define void @call_fwrite(
; CHECK-SAME: ptr [[FP:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @fwrite(ptr nonnull @ca1, i64 1, i64 1, ptr [[FP]])
; CHECK-NEXT:    ret void
;
  call i32 @fwrite(ptr @ca1, i64 1, i64 1, ptr %fp)
  ret void
}


; Verify that a call to an incompatible void printf(char*) with just "%s"
; isn't transformed.

define void @call_printf(ptr %s) {
; CHECK-LABEL: define void @call_printf(
; CHECK-SAME: ptr [[S:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @printf(ptr nonnull @pcnt_s)
; CHECK-NEXT:    ret void
;
  call i32 @printf(ptr @pcnt_s)
  ret void
}

; Verify that a call to an incompatible int fprintf(FILE*, char*) isn't
; transformed.

define i8 @call_fprintf(ptr %fp, ptr %p) {
; CHECK-LABEL: define i8 @call_fprintf(
; CHECK-SAME: ptr [[FP:%.*]], ptr [[P:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = call i8 (ptr, ptr, ...) @fprintf(ptr [[FP]], ptr nonnull @pcnt_s, ptr [[P]])
; CHECK-NEXT:    ret i8 [[CALL]]
;
  %call = call i8 (ptr, ptr, ...) @fprintf(ptr %fp, ptr @pcnt_s, ptr %p)
  ret i8 %call
}

; Verify that a call to an incompatible int sprintf(FILE*, char*) isn't
; transformed.

define i8 @call_sprintf(ptr %p, ptr %q) {
; CHECK-LABEL: define i8 @call_sprintf(
; CHECK-SAME: ptr [[P:%.*]], ptr [[Q:%.*]]) {
; CHECK-NEXT:    [[CALL:%.*]] = call i8 (ptr, ptr, ...) @sprintf(ptr [[P]], ptr nonnull @pcnt_s, ptr [[Q]])
; CHECK-NEXT:    ret i8 [[CALL]]
;
  %call = call i8 (ptr, ptr, ...) @sprintf(ptr %p, ptr @pcnt_s, ptr %q)
  ret i8 %call
}

