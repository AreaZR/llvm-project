; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=debugify,instcombine -S | FileCheck %s
; RUN: opt < %s -passes=debugify,instcombine -S --try-experimental-debuginfo-iterators | FileCheck %s

declare i32 @escape(i32)

define i32 @foo(i1 %c1) {
; CHECK-LABEL: define i32 @foo(
; CHECK-SAME: i1 [[C1:%.*]]) !dbg [[DBG5:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:      #dbg_value(ptr poison, [[META9:![0-9]+]], !DIExpression(), [[META14:![0-9]+]])
; CHECK-NEXT:    br i1 [[C1]], label %[[LHS:.*]], label %[[RHS:.*]], !dbg [[DBG15:![0-9]+]]
; CHECK:       [[LHS]]:
; CHECK-NEXT:    br label %[[CLEANUP:.*]], !dbg [[DBG16:![0-9]+]]
; CHECK:       [[RHS]]:
; CHECK-NEXT:    br label %[[CLEANUP]], !dbg [[DBG17:![0-9]+]]
; CHECK:       [[CLEANUP]]:
; CHECK-NEXT:    [[STOREMERGE:%.*]] = phi i32 [ 2, %[[RHS]] ], [ 1, %[[LHS]] ], !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:      #dbg_value(i32 [[STOREMERGE]], [[META11:![0-9]+]], !DIExpression(), [[META19:![0-9]+]])
; CHECK-NEXT:    [[RET_VAL:%.*]] = call i32 @escape(i32 [[STOREMERGE]]), !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:      #dbg_value(i32 [[RET_VAL]], [[META13:![0-9]+]], !DIExpression(), [[DBG20]])
; CHECK-NEXT:    ret i32 [[RET_VAL]], !dbg [[DBG21:![0-9]+]]
;
entry:
  %baz = alloca i32
  br i1 %c1, label %lhs, label %rhs

lhs:
  store i32 1, ptr %baz
  br label %cleanup

rhs:
  store i32 2, ptr %baz
  br label %cleanup

cleanup:
  %baz.val = load i32, ptr %baz
  %ret.val = call i32 @escape(i32 %baz.val)
  ret i32 %ret.val
}

;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C, file: [[META1:![0-9]+]], producer: "debugify", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
; CHECK: [[META1]] = !DIFile(filename: "<stdin>", directory: {{.*}})
; CHECK: [[DBG5]] = distinct !DISubprogram(name: "foo", linkageName: "foo", scope: null, file: [[META1]], line: 1, type: [[META6:![0-9]+]], scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META8:![0-9]+]])
; CHECK: [[META6]] = !DISubroutineType(types: [[META7:![0-9]+]])
; CHECK: [[META7]] = !{}
; CHECK: [[META8]] = !{[[META9]], [[META11]], [[META13]]}
; CHECK: [[META9]] = !DILocalVariable(name: "1", scope: [[DBG5]], file: [[META1]], line: 1, type: [[META10:![0-9]+]])
; CHECK: [[META10]] = !DIBasicType(name: "ty64", size: 64, encoding: DW_ATE_unsigned)
; CHECK: [[META11]] = !DILocalVariable(name: "2", scope: [[DBG5]], file: [[META1]], line: 7, type: [[META12:![0-9]+]])
; CHECK: [[META12]] = !DIBasicType(name: "ty32", size: 32, encoding: DW_ATE_unsigned)
; CHECK: [[META13]] = !DILocalVariable(name: "3", scope: [[DBG5]], file: [[META1]], line: 8, type: [[META12]])
; CHECK: [[META14]] = !DILocation(line: 1, column: 1, scope: [[DBG5]])
; CHECK: [[DBG15]] = !DILocation(line: 2, column: 1, scope: [[DBG5]])
; CHECK: [[DBG16]] = !DILocation(line: 4, column: 1, scope: [[DBG5]])
; CHECK: [[DBG17]] = !DILocation(line: 6, column: 1, scope: [[DBG5]])
; CHECK: [[DBG18]] = !DILocation(line: 0, scope: [[DBG5]])
; CHECK: [[META19]] = !DILocation(line: 7, column: 1, scope: [[DBG5]])
; CHECK: [[DBG20]] = !DILocation(line: 8, column: 1, scope: [[DBG5]])
; CHECK: [[DBG21]] = !DILocation(line: 9, column: 1, scope: [[DBG5]])
;.
