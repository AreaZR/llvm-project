; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=instcombine -S < %s | FileCheck %s
; RUN: opt -debugify-each -passes=instcombine -S < %s | FileCheck %s

; These are both direct calls, but make sure instcombine leaves the casts
; alone.

define i32 @call_thunk(i32 %x, i32 %y) {
; CHECK-LABEL: define i32 @call_thunk(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]]) {
; CHECK-NEXT:    [[R:%.*]] = call i32 @inc_first_arg_thunk(i32 [[X]], i32 [[Y]])
; CHECK-NEXT:    ret i32 [[R]]
;
  %r = call i32 @inc_first_arg_thunk(i32 %x, i32 %y)
  ret i32 %r
}


define internal void @inc_first_arg_thunk(i32 %arg1, ...) #0 {
; CHECK-LABEL: define internal void @inc_first_arg_thunk(
; CHECK-SAME: i32 [[ARG1:%.*]], ...) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[INC:%.*]] = add i32 [[ARG1]], 1
; CHECK-NEXT:    musttail call void (i32, ...) @plus(i32 [[INC]], ...)
; CHECK-NEXT:    ret void
;
entry:
  %inc = add i32 %arg1, 1
  musttail call void (i32, ...) @plus(i32 %inc, ...)
  ret void
}


define internal i32 @plus(i32 %x, i32 %y) {
; CHECK-LABEL: define internal i32 @plus(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]]) {
; CHECK-NEXT:    [[R:%.*]] = add i32 [[X]], [[Y]]
; CHECK-NEXT:    ret i32 [[R]]
;
  %r = add i32 %x, %y
  ret i32 %r
}

attributes #0 = { "thunk" }
