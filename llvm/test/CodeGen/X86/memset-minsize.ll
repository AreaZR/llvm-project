; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown | FileCheck %s

define void @tiny_memset_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: tiny_memset_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andq $0, (%rdi)
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 4 %ptr, i8 0, i32 8, i1 false)
  ret void
}

define void @small_memset_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: small_memset_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq $32
; CHECK-NEXT:    popq %rcx
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    rep;stosl %eax, %es:(%rdi)
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 4 %ptr, i8 0, i32 128, i1 false)
  ret void
}

define void @medium_memset_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: medium_memset_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $512, %edx # imm = 0x200
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq memset@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 4 %ptr, i8 0, i32 512, i1 false)
  ret void
}

define void @large_memset_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: large_memset_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $4096, %edx # imm = 0x1000
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq memset@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 4 %ptr, i8 0, i32 4096, i1 false)
  ret void
}

define void @huge_memset_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: huge_memset_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $8192, %edx # imm = 0x2000
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq memset@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 4 %ptr, i8 0, i32 8192, i1 false)
  ret void
}

define void @odd_length_memset_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: odd_length_memset_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $255, %edx
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq memset@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 4 %ptr, i8 0, i32 255, i1 false)
  ret void
}

define void @align_1_memset_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: align_1_memset_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $256, %edx # imm = 0x100
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq memset@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 1 %ptr, i8 0, i32 256, i1 false)
  ret void
}

define void @align_2_memset_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: align_2_memset_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $256, %edx # imm = 0x100
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq memset@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 2 %ptr, i8 0, i32 256, i1 false)
  ret void
}

define void @align_4_memset_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: align_4_memset_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $256, %edx # imm = 0x100
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq memset@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 4 %ptr, i8 0, i32 256, i1 false)
  ret void
}

define void @align_8_memset_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: align_8_memset_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $256, %edx # imm = 0x100
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq memset@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 8 %ptr, i8 0, i32 256, i1 false)
  ret void
}

define void @tiny_memset_inline_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: tiny_memset_inline_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andq $0, (%rdi)
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.inline.p0.i32(ptr align 4 %ptr, i8 0, i32 8, i1 false)
  ret void
}

define void @small_memset_inline_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: small_memset_inline_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq $32
; CHECK-NEXT:    popq %rcx
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    rep;stosl %eax, %es:(%rdi)
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.inline.p0.i32(ptr align 4 %ptr, i8 0, i32 128, i1 false)
  ret void
}

define void @medium_memset_inline_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: medium_memset_inline_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andq $0, 504(%rdi)
; CHECK-NEXT:    andq $0, 496(%rdi)
; CHECK-NEXT:    andq $0, 488(%rdi)
; CHECK-NEXT:    andq $0, 480(%rdi)
; CHECK-NEXT:    andq $0, 472(%rdi)
; CHECK-NEXT:    andq $0, 464(%rdi)
; CHECK-NEXT:    andq $0, 456(%rdi)
; CHECK-NEXT:    andq $0, 448(%rdi)
; CHECK-NEXT:    andq $0, 440(%rdi)
; CHECK-NEXT:    andq $0, 432(%rdi)
; CHECK-NEXT:    andq $0, 424(%rdi)
; CHECK-NEXT:    andq $0, 416(%rdi)
; CHECK-NEXT:    andq $0, 408(%rdi)
; CHECK-NEXT:    andq $0, 400(%rdi)
; CHECK-NEXT:    andq $0, 392(%rdi)
; CHECK-NEXT:    andq $0, 384(%rdi)
; CHECK-NEXT:    andq $0, 376(%rdi)
; CHECK-NEXT:    andq $0, 368(%rdi)
; CHECK-NEXT:    andq $0, 360(%rdi)
; CHECK-NEXT:    andq $0, 352(%rdi)
; CHECK-NEXT:    andq $0, 344(%rdi)
; CHECK-NEXT:    andq $0, 336(%rdi)
; CHECK-NEXT:    andq $0, 328(%rdi)
; CHECK-NEXT:    andq $0, 320(%rdi)
; CHECK-NEXT:    andq $0, 312(%rdi)
; CHECK-NEXT:    andq $0, 304(%rdi)
; CHECK-NEXT:    andq $0, 296(%rdi)
; CHECK-NEXT:    andq $0, 288(%rdi)
; CHECK-NEXT:    andq $0, 280(%rdi)
; CHECK-NEXT:    andq $0, 272(%rdi)
; CHECK-NEXT:    andq $0, 264(%rdi)
; CHECK-NEXT:    andq $0, 256(%rdi)
; CHECK-NEXT:    andq $0, 248(%rdi)
; CHECK-NEXT:    andq $0, 240(%rdi)
; CHECK-NEXT:    andq $0, 232(%rdi)
; CHECK-NEXT:    andq $0, 224(%rdi)
; CHECK-NEXT:    andq $0, 216(%rdi)
; CHECK-NEXT:    andq $0, 208(%rdi)
; CHECK-NEXT:    andq $0, 200(%rdi)
; CHECK-NEXT:    andq $0, 192(%rdi)
; CHECK-NEXT:    andq $0, 184(%rdi)
; CHECK-NEXT:    andq $0, 176(%rdi)
; CHECK-NEXT:    andq $0, 168(%rdi)
; CHECK-NEXT:    andq $0, 160(%rdi)
; CHECK-NEXT:    andq $0, 152(%rdi)
; CHECK-NEXT:    andq $0, 144(%rdi)
; CHECK-NEXT:    andq $0, 136(%rdi)
; CHECK-NEXT:    andq $0, 128(%rdi)
; CHECK-NEXT:    andq $0, 120(%rdi)
; CHECK-NEXT:    andq $0, 112(%rdi)
; CHECK-NEXT:    andq $0, 104(%rdi)
; CHECK-NEXT:    andq $0, 96(%rdi)
; CHECK-NEXT:    andq $0, 88(%rdi)
; CHECK-NEXT:    andq $0, 80(%rdi)
; CHECK-NEXT:    andq $0, 72(%rdi)
; CHECK-NEXT:    andq $0, 64(%rdi)
; CHECK-NEXT:    andq $0, 56(%rdi)
; CHECK-NEXT:    andq $0, 48(%rdi)
; CHECK-NEXT:    andq $0, 40(%rdi)
; CHECK-NEXT:    andq $0, 32(%rdi)
; CHECK-NEXT:    andq $0, 24(%rdi)
; CHECK-NEXT:    andq $0, 16(%rdi)
; CHECK-NEXT:    andq $0, 8(%rdi)
; CHECK-NEXT:    andq $0, (%rdi)
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.inline.p0.i32(ptr align 4 %ptr, i8 0, i32 512, i1 false)
  ret void
}

define void @large_memset_inline_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: large_memset_inline_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andq $0, 4088(%rdi)
; CHECK-NEXT:    andq $0, 4080(%rdi)
; CHECK-NEXT:    andq $0, 4072(%rdi)
; CHECK-NEXT:    andq $0, 4064(%rdi)
; CHECK-NEXT:    andq $0, 4056(%rdi)
; CHECK-NEXT:    andq $0, 4048(%rdi)
; CHECK-NEXT:    andq $0, 4040(%rdi)
; CHECK-NEXT:    andq $0, 4032(%rdi)
; CHECK-NEXT:    andq $0, 4024(%rdi)
; CHECK-NEXT:    andq $0, 4016(%rdi)
; CHECK-NEXT:    andq $0, 4008(%rdi)
; CHECK-NEXT:    andq $0, 4000(%rdi)
; CHECK-NEXT:    andq $0, 3992(%rdi)
; CHECK-NEXT:    andq $0, 3984(%rdi)
; CHECK-NEXT:    andq $0, 3976(%rdi)
; CHECK-NEXT:    andq $0, 3968(%rdi)
; CHECK-NEXT:    andq $0, 3960(%rdi)
; CHECK-NEXT:    andq $0, 3952(%rdi)
; CHECK-NEXT:    andq $0, 3944(%rdi)
; CHECK-NEXT:    andq $0, 3936(%rdi)
; CHECK-NEXT:    andq $0, 3928(%rdi)
; CHECK-NEXT:    andq $0, 3920(%rdi)
; CHECK-NEXT:    andq $0, 3912(%rdi)
; CHECK-NEXT:    andq $0, 3904(%rdi)
; CHECK-NEXT:    andq $0, 3896(%rdi)
; CHECK-NEXT:    andq $0, 3888(%rdi)
; CHECK-NEXT:    andq $0, 3880(%rdi)
; CHECK-NEXT:    andq $0, 3872(%rdi)
; CHECK-NEXT:    andq $0, 3864(%rdi)
; CHECK-NEXT:    andq $0, 3856(%rdi)
; CHECK-NEXT:    andq $0, 3848(%rdi)
; CHECK-NEXT:    andq $0, 3840(%rdi)
; CHECK-NEXT:    andq $0, 3832(%rdi)
; CHECK-NEXT:    andq $0, 3824(%rdi)
; CHECK-NEXT:    andq $0, 3816(%rdi)
; CHECK-NEXT:    andq $0, 3808(%rdi)
; CHECK-NEXT:    andq $0, 3800(%rdi)
; CHECK-NEXT:    andq $0, 3792(%rdi)
; CHECK-NEXT:    andq $0, 3784(%rdi)
; CHECK-NEXT:    andq $0, 3776(%rdi)
; CHECK-NEXT:    andq $0, 3768(%rdi)
; CHECK-NEXT:    andq $0, 3760(%rdi)
; CHECK-NEXT:    andq $0, 3752(%rdi)
; CHECK-NEXT:    andq $0, 3744(%rdi)
; CHECK-NEXT:    andq $0, 3736(%rdi)
; CHECK-NEXT:    andq $0, 3728(%rdi)
; CHECK-NEXT:    andq $0, 3720(%rdi)
; CHECK-NEXT:    andq $0, 3712(%rdi)
; CHECK-NEXT:    andq $0, 3704(%rdi)
; CHECK-NEXT:    andq $0, 3696(%rdi)
; CHECK-NEXT:    andq $0, 3688(%rdi)
; CHECK-NEXT:    andq $0, 3680(%rdi)
; CHECK-NEXT:    andq $0, 3672(%rdi)
; CHECK-NEXT:    andq $0, 3664(%rdi)
; CHECK-NEXT:    andq $0, 3656(%rdi)
; CHECK-NEXT:    andq $0, 3648(%rdi)
; CHECK-NEXT:    andq $0, 3640(%rdi)
; CHECK-NEXT:    andq $0, 3632(%rdi)
; CHECK-NEXT:    andq $0, 3624(%rdi)
; CHECK-NEXT:    andq $0, 3616(%rdi)
; CHECK-NEXT:    andq $0, 3608(%rdi)
; CHECK-NEXT:    andq $0, 3600(%rdi)
; CHECK-NEXT:    andq $0, 3592(%rdi)
; CHECK-NEXT:    andq $0, 3584(%rdi)
; CHECK-NEXT:    andq $0, 3576(%rdi)
; CHECK-NEXT:    andq $0, 3568(%rdi)
; CHECK-NEXT:    andq $0, 3560(%rdi)
; CHECK-NEXT:    andq $0, 3552(%rdi)
; CHECK-NEXT:    andq $0, 3544(%rdi)
; CHECK-NEXT:    andq $0, 3536(%rdi)
; CHECK-NEXT:    andq $0, 3528(%rdi)
; CHECK-NEXT:    andq $0, 3520(%rdi)
; CHECK-NEXT:    andq $0, 3512(%rdi)
; CHECK-NEXT:    andq $0, 3504(%rdi)
; CHECK-NEXT:    andq $0, 3496(%rdi)
; CHECK-NEXT:    andq $0, 3488(%rdi)
; CHECK-NEXT:    andq $0, 3480(%rdi)
; CHECK-NEXT:    andq $0, 3472(%rdi)
; CHECK-NEXT:    andq $0, 3464(%rdi)
; CHECK-NEXT:    andq $0, 3456(%rdi)
; CHECK-NEXT:    andq $0, 3448(%rdi)
; CHECK-NEXT:    andq $0, 3440(%rdi)
; CHECK-NEXT:    andq $0, 3432(%rdi)
; CHECK-NEXT:    andq $0, 3424(%rdi)
; CHECK-NEXT:    andq $0, 3416(%rdi)
; CHECK-NEXT:    andq $0, 3408(%rdi)
; CHECK-NEXT:    andq $0, 3400(%rdi)
; CHECK-NEXT:    andq $0, 3392(%rdi)
; CHECK-NEXT:    andq $0, 3384(%rdi)
; CHECK-NEXT:    andq $0, 3376(%rdi)
; CHECK-NEXT:    andq $0, 3368(%rdi)
; CHECK-NEXT:    andq $0, 3360(%rdi)
; CHECK-NEXT:    andq $0, 3352(%rdi)
; CHECK-NEXT:    andq $0, 3344(%rdi)
; CHECK-NEXT:    andq $0, 3336(%rdi)
; CHECK-NEXT:    andq $0, 3328(%rdi)
; CHECK-NEXT:    andq $0, 3320(%rdi)
; CHECK-NEXT:    andq $0, 3312(%rdi)
; CHECK-NEXT:    andq $0, 3304(%rdi)
; CHECK-NEXT:    andq $0, 3296(%rdi)
; CHECK-NEXT:    andq $0, 3288(%rdi)
; CHECK-NEXT:    andq $0, 3280(%rdi)
; CHECK-NEXT:    andq $0, 3272(%rdi)
; CHECK-NEXT:    andq $0, 3264(%rdi)
; CHECK-NEXT:    andq $0, 3256(%rdi)
; CHECK-NEXT:    andq $0, 3248(%rdi)
; CHECK-NEXT:    andq $0, 3240(%rdi)
; CHECK-NEXT:    andq $0, 3232(%rdi)
; CHECK-NEXT:    andq $0, 3224(%rdi)
; CHECK-NEXT:    andq $0, 3216(%rdi)
; CHECK-NEXT:    andq $0, 3208(%rdi)
; CHECK-NEXT:    andq $0, 3200(%rdi)
; CHECK-NEXT:    andq $0, 3192(%rdi)
; CHECK-NEXT:    andq $0, 3184(%rdi)
; CHECK-NEXT:    andq $0, 3176(%rdi)
; CHECK-NEXT:    andq $0, 3168(%rdi)
; CHECK-NEXT:    andq $0, 3160(%rdi)
; CHECK-NEXT:    andq $0, 3152(%rdi)
; CHECK-NEXT:    andq $0, 3144(%rdi)
; CHECK-NEXT:    andq $0, 3136(%rdi)
; CHECK-NEXT:    andq $0, 3128(%rdi)
; CHECK-NEXT:    andq $0, 3120(%rdi)
; CHECK-NEXT:    andq $0, 3112(%rdi)
; CHECK-NEXT:    andq $0, 3104(%rdi)
; CHECK-NEXT:    andq $0, 3096(%rdi)
; CHECK-NEXT:    andq $0, 3088(%rdi)
; CHECK-NEXT:    andq $0, 3080(%rdi)
; CHECK-NEXT:    andq $0, 3072(%rdi)
; CHECK-NEXT:    andq $0, 3064(%rdi)
; CHECK-NEXT:    andq $0, 3056(%rdi)
; CHECK-NEXT:    andq $0, 3048(%rdi)
; CHECK-NEXT:    andq $0, 3040(%rdi)
; CHECK-NEXT:    andq $0, 3032(%rdi)
; CHECK-NEXT:    andq $0, 3024(%rdi)
; CHECK-NEXT:    andq $0, 3016(%rdi)
; CHECK-NEXT:    andq $0, 3008(%rdi)
; CHECK-NEXT:    andq $0, 3000(%rdi)
; CHECK-NEXT:    andq $0, 2992(%rdi)
; CHECK-NEXT:    andq $0, 2984(%rdi)
; CHECK-NEXT:    andq $0, 2976(%rdi)
; CHECK-NEXT:    andq $0, 2968(%rdi)
; CHECK-NEXT:    andq $0, 2960(%rdi)
; CHECK-NEXT:    andq $0, 2952(%rdi)
; CHECK-NEXT:    andq $0, 2944(%rdi)
; CHECK-NEXT:    andq $0, 2936(%rdi)
; CHECK-NEXT:    andq $0, 2928(%rdi)
; CHECK-NEXT:    andq $0, 2920(%rdi)
; CHECK-NEXT:    andq $0, 2912(%rdi)
; CHECK-NEXT:    andq $0, 2904(%rdi)
; CHECK-NEXT:    andq $0, 2896(%rdi)
; CHECK-NEXT:    andq $0, 2888(%rdi)
; CHECK-NEXT:    andq $0, 2880(%rdi)
; CHECK-NEXT:    andq $0, 2872(%rdi)
; CHECK-NEXT:    andq $0, 2864(%rdi)
; CHECK-NEXT:    andq $0, 2856(%rdi)
; CHECK-NEXT:    andq $0, 2848(%rdi)
; CHECK-NEXT:    andq $0, 2840(%rdi)
; CHECK-NEXT:    andq $0, 2832(%rdi)
; CHECK-NEXT:    andq $0, 2824(%rdi)
; CHECK-NEXT:    andq $0, 2816(%rdi)
; CHECK-NEXT:    andq $0, 2808(%rdi)
; CHECK-NEXT:    andq $0, 2800(%rdi)
; CHECK-NEXT:    andq $0, 2792(%rdi)
; CHECK-NEXT:    andq $0, 2784(%rdi)
; CHECK-NEXT:    andq $0, 2776(%rdi)
; CHECK-NEXT:    andq $0, 2768(%rdi)
; CHECK-NEXT:    andq $0, 2760(%rdi)
; CHECK-NEXT:    andq $0, 2752(%rdi)
; CHECK-NEXT:    andq $0, 2744(%rdi)
; CHECK-NEXT:    andq $0, 2736(%rdi)
; CHECK-NEXT:    andq $0, 2728(%rdi)
; CHECK-NEXT:    andq $0, 2720(%rdi)
; CHECK-NEXT:    andq $0, 2712(%rdi)
; CHECK-NEXT:    andq $0, 2704(%rdi)
; CHECK-NEXT:    andq $0, 2696(%rdi)
; CHECK-NEXT:    andq $0, 2688(%rdi)
; CHECK-NEXT:    andq $0, 2680(%rdi)
; CHECK-NEXT:    andq $0, 2672(%rdi)
; CHECK-NEXT:    andq $0, 2664(%rdi)
; CHECK-NEXT:    andq $0, 2656(%rdi)
; CHECK-NEXT:    andq $0, 2648(%rdi)
; CHECK-NEXT:    andq $0, 2640(%rdi)
; CHECK-NEXT:    andq $0, 2632(%rdi)
; CHECK-NEXT:    andq $0, 2624(%rdi)
; CHECK-NEXT:    andq $0, 2616(%rdi)
; CHECK-NEXT:    andq $0, 2608(%rdi)
; CHECK-NEXT:    andq $0, 2600(%rdi)
; CHECK-NEXT:    andq $0, 2592(%rdi)
; CHECK-NEXT:    andq $0, 2584(%rdi)
; CHECK-NEXT:    andq $0, 2576(%rdi)
; CHECK-NEXT:    andq $0, 2568(%rdi)
; CHECK-NEXT:    andq $0, 2560(%rdi)
; CHECK-NEXT:    andq $0, 2552(%rdi)
; CHECK-NEXT:    andq $0, 2544(%rdi)
; CHECK-NEXT:    andq $0, 2536(%rdi)
; CHECK-NEXT:    andq $0, 2528(%rdi)
; CHECK-NEXT:    andq $0, 2520(%rdi)
; CHECK-NEXT:    andq $0, 2512(%rdi)
; CHECK-NEXT:    andq $0, 2504(%rdi)
; CHECK-NEXT:    andq $0, 2496(%rdi)
; CHECK-NEXT:    andq $0, 2488(%rdi)
; CHECK-NEXT:    andq $0, 2480(%rdi)
; CHECK-NEXT:    andq $0, 2472(%rdi)
; CHECK-NEXT:    andq $0, 2464(%rdi)
; CHECK-NEXT:    andq $0, 2456(%rdi)
; CHECK-NEXT:    andq $0, 2448(%rdi)
; CHECK-NEXT:    andq $0, 2440(%rdi)
; CHECK-NEXT:    andq $0, 2432(%rdi)
; CHECK-NEXT:    andq $0, 2424(%rdi)
; CHECK-NEXT:    andq $0, 2416(%rdi)
; CHECK-NEXT:    andq $0, 2408(%rdi)
; CHECK-NEXT:    andq $0, 2400(%rdi)
; CHECK-NEXT:    andq $0, 2392(%rdi)
; CHECK-NEXT:    andq $0, 2384(%rdi)
; CHECK-NEXT:    andq $0, 2376(%rdi)
; CHECK-NEXT:    andq $0, 2368(%rdi)
; CHECK-NEXT:    andq $0, 2360(%rdi)
; CHECK-NEXT:    andq $0, 2352(%rdi)
; CHECK-NEXT:    andq $0, 2344(%rdi)
; CHECK-NEXT:    andq $0, 2336(%rdi)
; CHECK-NEXT:    andq $0, 2328(%rdi)
; CHECK-NEXT:    andq $0, 2320(%rdi)
; CHECK-NEXT:    andq $0, 2312(%rdi)
; CHECK-NEXT:    andq $0, 2304(%rdi)
; CHECK-NEXT:    andq $0, 2296(%rdi)
; CHECK-NEXT:    andq $0, 2288(%rdi)
; CHECK-NEXT:    andq $0, 2280(%rdi)
; CHECK-NEXT:    andq $0, 2272(%rdi)
; CHECK-NEXT:    andq $0, 2264(%rdi)
; CHECK-NEXT:    andq $0, 2256(%rdi)
; CHECK-NEXT:    andq $0, 2248(%rdi)
; CHECK-NEXT:    andq $0, 2240(%rdi)
; CHECK-NEXT:    andq $0, 2232(%rdi)
; CHECK-NEXT:    andq $0, 2224(%rdi)
; CHECK-NEXT:    andq $0, 2216(%rdi)
; CHECK-NEXT:    andq $0, 2208(%rdi)
; CHECK-NEXT:    andq $0, 2200(%rdi)
; CHECK-NEXT:    andq $0, 2192(%rdi)
; CHECK-NEXT:    andq $0, 2184(%rdi)
; CHECK-NEXT:    andq $0, 2176(%rdi)
; CHECK-NEXT:    andq $0, 2168(%rdi)
; CHECK-NEXT:    andq $0, 2160(%rdi)
; CHECK-NEXT:    andq $0, 2152(%rdi)
; CHECK-NEXT:    andq $0, 2144(%rdi)
; CHECK-NEXT:    andq $0, 2136(%rdi)
; CHECK-NEXT:    andq $0, 2128(%rdi)
; CHECK-NEXT:    andq $0, 2120(%rdi)
; CHECK-NEXT:    andq $0, 2112(%rdi)
; CHECK-NEXT:    andq $0, 2104(%rdi)
; CHECK-NEXT:    andq $0, 2096(%rdi)
; CHECK-NEXT:    andq $0, 2088(%rdi)
; CHECK-NEXT:    andq $0, 2080(%rdi)
; CHECK-NEXT:    andq $0, 2072(%rdi)
; CHECK-NEXT:    andq $0, 2064(%rdi)
; CHECK-NEXT:    andq $0, 2056(%rdi)
; CHECK-NEXT:    andq $0, 2048(%rdi)
; CHECK-NEXT:    andq $0, 2040(%rdi)
; CHECK-NEXT:    andq $0, 2032(%rdi)
; CHECK-NEXT:    andq $0, 2024(%rdi)
; CHECK-NEXT:    andq $0, 2016(%rdi)
; CHECK-NEXT:    andq $0, 2008(%rdi)
; CHECK-NEXT:    andq $0, 2000(%rdi)
; CHECK-NEXT:    andq $0, 1992(%rdi)
; CHECK-NEXT:    andq $0, 1984(%rdi)
; CHECK-NEXT:    andq $0, 1976(%rdi)
; CHECK-NEXT:    andq $0, 1968(%rdi)
; CHECK-NEXT:    andq $0, 1960(%rdi)
; CHECK-NEXT:    andq $0, 1952(%rdi)
; CHECK-NEXT:    andq $0, 1944(%rdi)
; CHECK-NEXT:    andq $0, 1936(%rdi)
; CHECK-NEXT:    andq $0, 1928(%rdi)
; CHECK-NEXT:    andq $0, 1920(%rdi)
; CHECK-NEXT:    andq $0, 1912(%rdi)
; CHECK-NEXT:    andq $0, 1904(%rdi)
; CHECK-NEXT:    andq $0, 1896(%rdi)
; CHECK-NEXT:    andq $0, 1888(%rdi)
; CHECK-NEXT:    andq $0, 1880(%rdi)
; CHECK-NEXT:    andq $0, 1872(%rdi)
; CHECK-NEXT:    andq $0, 1864(%rdi)
; CHECK-NEXT:    andq $0, 1856(%rdi)
; CHECK-NEXT:    andq $0, 1848(%rdi)
; CHECK-NEXT:    andq $0, 1840(%rdi)
; CHECK-NEXT:    andq $0, 1832(%rdi)
; CHECK-NEXT:    andq $0, 1824(%rdi)
; CHECK-NEXT:    andq $0, 1816(%rdi)
; CHECK-NEXT:    andq $0, 1808(%rdi)
; CHECK-NEXT:    andq $0, 1800(%rdi)
; CHECK-NEXT:    andq $0, 1792(%rdi)
; CHECK-NEXT:    andq $0, 1784(%rdi)
; CHECK-NEXT:    andq $0, 1776(%rdi)
; CHECK-NEXT:    andq $0, 1768(%rdi)
; CHECK-NEXT:    andq $0, 1760(%rdi)
; CHECK-NEXT:    andq $0, 1752(%rdi)
; CHECK-NEXT:    andq $0, 1744(%rdi)
; CHECK-NEXT:    andq $0, 1736(%rdi)
; CHECK-NEXT:    andq $0, 1728(%rdi)
; CHECK-NEXT:    andq $0, 1720(%rdi)
; CHECK-NEXT:    andq $0, 1712(%rdi)
; CHECK-NEXT:    andq $0, 1704(%rdi)
; CHECK-NEXT:    andq $0, 1696(%rdi)
; CHECK-NEXT:    andq $0, 1688(%rdi)
; CHECK-NEXT:    andq $0, 1680(%rdi)
; CHECK-NEXT:    andq $0, 1672(%rdi)
; CHECK-NEXT:    andq $0, 1664(%rdi)
; CHECK-NEXT:    andq $0, 1656(%rdi)
; CHECK-NEXT:    andq $0, 1648(%rdi)
; CHECK-NEXT:    andq $0, 1640(%rdi)
; CHECK-NEXT:    andq $0, 1632(%rdi)
; CHECK-NEXT:    andq $0, 1624(%rdi)
; CHECK-NEXT:    andq $0, 1616(%rdi)
; CHECK-NEXT:    andq $0, 1608(%rdi)
; CHECK-NEXT:    andq $0, 1600(%rdi)
; CHECK-NEXT:    andq $0, 1592(%rdi)
; CHECK-NEXT:    andq $0, 1584(%rdi)
; CHECK-NEXT:    andq $0, 1576(%rdi)
; CHECK-NEXT:    andq $0, 1568(%rdi)
; CHECK-NEXT:    andq $0, 1560(%rdi)
; CHECK-NEXT:    andq $0, 1552(%rdi)
; CHECK-NEXT:    andq $0, 1544(%rdi)
; CHECK-NEXT:    andq $0, 1536(%rdi)
; CHECK-NEXT:    andq $0, 1528(%rdi)
; CHECK-NEXT:    andq $0, 1520(%rdi)
; CHECK-NEXT:    andq $0, 1512(%rdi)
; CHECK-NEXT:    andq $0, 1504(%rdi)
; CHECK-NEXT:    andq $0, 1496(%rdi)
; CHECK-NEXT:    andq $0, 1488(%rdi)
; CHECK-NEXT:    andq $0, 1480(%rdi)
; CHECK-NEXT:    andq $0, 1472(%rdi)
; CHECK-NEXT:    andq $0, 1464(%rdi)
; CHECK-NEXT:    andq $0, 1456(%rdi)
; CHECK-NEXT:    andq $0, 1448(%rdi)
; CHECK-NEXT:    andq $0, 1440(%rdi)
; CHECK-NEXT:    andq $0, 1432(%rdi)
; CHECK-NEXT:    andq $0, 1424(%rdi)
; CHECK-NEXT:    andq $0, 1416(%rdi)
; CHECK-NEXT:    andq $0, 1408(%rdi)
; CHECK-NEXT:    andq $0, 1400(%rdi)
; CHECK-NEXT:    andq $0, 1392(%rdi)
; CHECK-NEXT:    andq $0, 1384(%rdi)
; CHECK-NEXT:    andq $0, 1376(%rdi)
; CHECK-NEXT:    andq $0, 1368(%rdi)
; CHECK-NEXT:    andq $0, 1360(%rdi)
; CHECK-NEXT:    andq $0, 1352(%rdi)
; CHECK-NEXT:    andq $0, 1344(%rdi)
; CHECK-NEXT:    andq $0, 1336(%rdi)
; CHECK-NEXT:    andq $0, 1328(%rdi)
; CHECK-NEXT:    andq $0, 1320(%rdi)
; CHECK-NEXT:    andq $0, 1312(%rdi)
; CHECK-NEXT:    andq $0, 1304(%rdi)
; CHECK-NEXT:    andq $0, 1296(%rdi)
; CHECK-NEXT:    andq $0, 1288(%rdi)
; CHECK-NEXT:    andq $0, 1280(%rdi)
; CHECK-NEXT:    andq $0, 1272(%rdi)
; CHECK-NEXT:    andq $0, 1264(%rdi)
; CHECK-NEXT:    andq $0, 1256(%rdi)
; CHECK-NEXT:    andq $0, 1248(%rdi)
; CHECK-NEXT:    andq $0, 1240(%rdi)
; CHECK-NEXT:    andq $0, 1232(%rdi)
; CHECK-NEXT:    andq $0, 1224(%rdi)
; CHECK-NEXT:    andq $0, 1216(%rdi)
; CHECK-NEXT:    andq $0, 1208(%rdi)
; CHECK-NEXT:    andq $0, 1200(%rdi)
; CHECK-NEXT:    andq $0, 1192(%rdi)
; CHECK-NEXT:    andq $0, 1184(%rdi)
; CHECK-NEXT:    andq $0, 1176(%rdi)
; CHECK-NEXT:    andq $0, 1168(%rdi)
; CHECK-NEXT:    andq $0, 1160(%rdi)
; CHECK-NEXT:    andq $0, 1152(%rdi)
; CHECK-NEXT:    andq $0, 1144(%rdi)
; CHECK-NEXT:    andq $0, 1136(%rdi)
; CHECK-NEXT:    andq $0, 1128(%rdi)
; CHECK-NEXT:    andq $0, 1120(%rdi)
; CHECK-NEXT:    andq $0, 1112(%rdi)
; CHECK-NEXT:    andq $0, 1104(%rdi)
; CHECK-NEXT:    andq $0, 1096(%rdi)
; CHECK-NEXT:    andq $0, 1088(%rdi)
; CHECK-NEXT:    andq $0, 1080(%rdi)
; CHECK-NEXT:    andq $0, 1072(%rdi)
; CHECK-NEXT:    andq $0, 1064(%rdi)
; CHECK-NEXT:    andq $0, 1056(%rdi)
; CHECK-NEXT:    andq $0, 1048(%rdi)
; CHECK-NEXT:    andq $0, 1040(%rdi)
; CHECK-NEXT:    andq $0, 1032(%rdi)
; CHECK-NEXT:    andq $0, 1024(%rdi)
; CHECK-NEXT:    andq $0, 1016(%rdi)
; CHECK-NEXT:    andq $0, 1008(%rdi)
; CHECK-NEXT:    andq $0, 1000(%rdi)
; CHECK-NEXT:    andq $0, 992(%rdi)
; CHECK-NEXT:    andq $0, 984(%rdi)
; CHECK-NEXT:    andq $0, 976(%rdi)
; CHECK-NEXT:    andq $0, 968(%rdi)
; CHECK-NEXT:    andq $0, 960(%rdi)
; CHECK-NEXT:    andq $0, 952(%rdi)
; CHECK-NEXT:    andq $0, 944(%rdi)
; CHECK-NEXT:    andq $0, 936(%rdi)
; CHECK-NEXT:    andq $0, 928(%rdi)
; CHECK-NEXT:    andq $0, 920(%rdi)
; CHECK-NEXT:    andq $0, 912(%rdi)
; CHECK-NEXT:    andq $0, 904(%rdi)
; CHECK-NEXT:    andq $0, 896(%rdi)
; CHECK-NEXT:    andq $0, 888(%rdi)
; CHECK-NEXT:    andq $0, 880(%rdi)
; CHECK-NEXT:    andq $0, 872(%rdi)
; CHECK-NEXT:    andq $0, 864(%rdi)
; CHECK-NEXT:    andq $0, 856(%rdi)
; CHECK-NEXT:    andq $0, 848(%rdi)
; CHECK-NEXT:    andq $0, 840(%rdi)
; CHECK-NEXT:    andq $0, 832(%rdi)
; CHECK-NEXT:    andq $0, 824(%rdi)
; CHECK-NEXT:    andq $0, 816(%rdi)
; CHECK-NEXT:    andq $0, 808(%rdi)
; CHECK-NEXT:    andq $0, 800(%rdi)
; CHECK-NEXT:    andq $0, 792(%rdi)
; CHECK-NEXT:    andq $0, 784(%rdi)
; CHECK-NEXT:    andq $0, 776(%rdi)
; CHECK-NEXT:    andq $0, 768(%rdi)
; CHECK-NEXT:    andq $0, 760(%rdi)
; CHECK-NEXT:    andq $0, 752(%rdi)
; CHECK-NEXT:    andq $0, 744(%rdi)
; CHECK-NEXT:    andq $0, 736(%rdi)
; CHECK-NEXT:    andq $0, 728(%rdi)
; CHECK-NEXT:    andq $0, 720(%rdi)
; CHECK-NEXT:    andq $0, 712(%rdi)
; CHECK-NEXT:    andq $0, 704(%rdi)
; CHECK-NEXT:    andq $0, 696(%rdi)
; CHECK-NEXT:    andq $0, 688(%rdi)
; CHECK-NEXT:    andq $0, 680(%rdi)
; CHECK-NEXT:    andq $0, 672(%rdi)
; CHECK-NEXT:    andq $0, 664(%rdi)
; CHECK-NEXT:    andq $0, 656(%rdi)
; CHECK-NEXT:    andq $0, 648(%rdi)
; CHECK-NEXT:    andq $0, 640(%rdi)
; CHECK-NEXT:    andq $0, 632(%rdi)
; CHECK-NEXT:    andq $0, 624(%rdi)
; CHECK-NEXT:    andq $0, 616(%rdi)
; CHECK-NEXT:    andq $0, 608(%rdi)
; CHECK-NEXT:    andq $0, 600(%rdi)
; CHECK-NEXT:    andq $0, 592(%rdi)
; CHECK-NEXT:    andq $0, 584(%rdi)
; CHECK-NEXT:    andq $0, 576(%rdi)
; CHECK-NEXT:    andq $0, 568(%rdi)
; CHECK-NEXT:    andq $0, 560(%rdi)
; CHECK-NEXT:    andq $0, 552(%rdi)
; CHECK-NEXT:    andq $0, 544(%rdi)
; CHECK-NEXT:    andq $0, 536(%rdi)
; CHECK-NEXT:    andq $0, 528(%rdi)
; CHECK-NEXT:    andq $0, 520(%rdi)
; CHECK-NEXT:    andq $0, 512(%rdi)
; CHECK-NEXT:    andq $0, 504(%rdi)
; CHECK-NEXT:    andq $0, 496(%rdi)
; CHECK-NEXT:    andq $0, 488(%rdi)
; CHECK-NEXT:    andq $0, 480(%rdi)
; CHECK-NEXT:    andq $0, 472(%rdi)
; CHECK-NEXT:    andq $0, 464(%rdi)
; CHECK-NEXT:    andq $0, 456(%rdi)
; CHECK-NEXT:    andq $0, 448(%rdi)
; CHECK-NEXT:    andq $0, 440(%rdi)
; CHECK-NEXT:    andq $0, 432(%rdi)
; CHECK-NEXT:    andq $0, 424(%rdi)
; CHECK-NEXT:    andq $0, 416(%rdi)
; CHECK-NEXT:    andq $0, 408(%rdi)
; CHECK-NEXT:    andq $0, 400(%rdi)
; CHECK-NEXT:    andq $0, 392(%rdi)
; CHECK-NEXT:    andq $0, 384(%rdi)
; CHECK-NEXT:    andq $0, 376(%rdi)
; CHECK-NEXT:    andq $0, 368(%rdi)
; CHECK-NEXT:    andq $0, 360(%rdi)
; CHECK-NEXT:    andq $0, 352(%rdi)
; CHECK-NEXT:    andq $0, 344(%rdi)
; CHECK-NEXT:    andq $0, 336(%rdi)
; CHECK-NEXT:    andq $0, 328(%rdi)
; CHECK-NEXT:    andq $0, 320(%rdi)
; CHECK-NEXT:    andq $0, 312(%rdi)
; CHECK-NEXT:    andq $0, 304(%rdi)
; CHECK-NEXT:    andq $0, 296(%rdi)
; CHECK-NEXT:    andq $0, 288(%rdi)
; CHECK-NEXT:    andq $0, 280(%rdi)
; CHECK-NEXT:    andq $0, 272(%rdi)
; CHECK-NEXT:    andq $0, 264(%rdi)
; CHECK-NEXT:    andq $0, 256(%rdi)
; CHECK-NEXT:    andq $0, 248(%rdi)
; CHECK-NEXT:    andq $0, 240(%rdi)
; CHECK-NEXT:    andq $0, 232(%rdi)
; CHECK-NEXT:    andq $0, 224(%rdi)
; CHECK-NEXT:    andq $0, 216(%rdi)
; CHECK-NEXT:    andq $0, 208(%rdi)
; CHECK-NEXT:    andq $0, 200(%rdi)
; CHECK-NEXT:    andq $0, 192(%rdi)
; CHECK-NEXT:    andq $0, 184(%rdi)
; CHECK-NEXT:    andq $0, 176(%rdi)
; CHECK-NEXT:    andq $0, 168(%rdi)
; CHECK-NEXT:    andq $0, 160(%rdi)
; CHECK-NEXT:    andq $0, 152(%rdi)
; CHECK-NEXT:    andq $0, 144(%rdi)
; CHECK-NEXT:    andq $0, 136(%rdi)
; CHECK-NEXT:    andq $0, 128(%rdi)
; CHECK-NEXT:    andq $0, 120(%rdi)
; CHECK-NEXT:    andq $0, 112(%rdi)
; CHECK-NEXT:    andq $0, 104(%rdi)
; CHECK-NEXT:    andq $0, 96(%rdi)
; CHECK-NEXT:    andq $0, 88(%rdi)
; CHECK-NEXT:    andq $0, 80(%rdi)
; CHECK-NEXT:    andq $0, 72(%rdi)
; CHECK-NEXT:    andq $0, 64(%rdi)
; CHECK-NEXT:    andq $0, 56(%rdi)
; CHECK-NEXT:    andq $0, 48(%rdi)
; CHECK-NEXT:    andq $0, 40(%rdi)
; CHECK-NEXT:    andq $0, 32(%rdi)
; CHECK-NEXT:    andq $0, 24(%rdi)
; CHECK-NEXT:    andq $0, 16(%rdi)
; CHECK-NEXT:    andq $0, 8(%rdi)
; CHECK-NEXT:    andq $0, (%rdi)
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.inline.p0.i32(ptr align 4 %ptr, i8 0, i32 4096, i1 false)
  ret void
}

define void @huge_memset_inline_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: huge_memset_inline_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $8192, %edx # imm = 0x2000
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq memset@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 4 %ptr, i8 0, i32 8192, i1 false)
  ret void
}

define void @odd_length_memset_inline_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: odd_length_memset_inline_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andq $0, 247(%rdi)
; CHECK-NEXT:    andq $0, 240(%rdi)
; CHECK-NEXT:    andq $0, 232(%rdi)
; CHECK-NEXT:    andq $0, 224(%rdi)
; CHECK-NEXT:    andq $0, 216(%rdi)
; CHECK-NEXT:    andq $0, 208(%rdi)
; CHECK-NEXT:    andq $0, 200(%rdi)
; CHECK-NEXT:    andq $0, 192(%rdi)
; CHECK-NEXT:    andq $0, 184(%rdi)
; CHECK-NEXT:    andq $0, 176(%rdi)
; CHECK-NEXT:    andq $0, 168(%rdi)
; CHECK-NEXT:    andq $0, 160(%rdi)
; CHECK-NEXT:    andq $0, 152(%rdi)
; CHECK-NEXT:    andq $0, 144(%rdi)
; CHECK-NEXT:    andq $0, 136(%rdi)
; CHECK-NEXT:    andq $0, 128(%rdi)
; CHECK-NEXT:    andq $0, 120(%rdi)
; CHECK-NEXT:    andq $0, 112(%rdi)
; CHECK-NEXT:    andq $0, 104(%rdi)
; CHECK-NEXT:    andq $0, 96(%rdi)
; CHECK-NEXT:    andq $0, 88(%rdi)
; CHECK-NEXT:    andq $0, 80(%rdi)
; CHECK-NEXT:    andq $0, 72(%rdi)
; CHECK-NEXT:    andq $0, 64(%rdi)
; CHECK-NEXT:    andq $0, 56(%rdi)
; CHECK-NEXT:    andq $0, 48(%rdi)
; CHECK-NEXT:    andq $0, 40(%rdi)
; CHECK-NEXT:    andq $0, 32(%rdi)
; CHECK-NEXT:    andq $0, 24(%rdi)
; CHECK-NEXT:    andq $0, 16(%rdi)
; CHECK-NEXT:    andq $0, 8(%rdi)
; CHECK-NEXT:    andq $0, (%rdi)
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.inline.p0.i32(ptr align 4 %ptr, i8 0, i32 255, i1 false)
  ret void
}

define void @align_1_memset_inline_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: align_1_memset_inline_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andq $0, 248(%rdi)
; CHECK-NEXT:    andq $0, 240(%rdi)
; CHECK-NEXT:    andq $0, 232(%rdi)
; CHECK-NEXT:    andq $0, 224(%rdi)
; CHECK-NEXT:    andq $0, 216(%rdi)
; CHECK-NEXT:    andq $0, 208(%rdi)
; CHECK-NEXT:    andq $0, 200(%rdi)
; CHECK-NEXT:    andq $0, 192(%rdi)
; CHECK-NEXT:    andq $0, 184(%rdi)
; CHECK-NEXT:    andq $0, 176(%rdi)
; CHECK-NEXT:    andq $0, 168(%rdi)
; CHECK-NEXT:    andq $0, 160(%rdi)
; CHECK-NEXT:    andq $0, 152(%rdi)
; CHECK-NEXT:    andq $0, 144(%rdi)
; CHECK-NEXT:    andq $0, 136(%rdi)
; CHECK-NEXT:    andq $0, 128(%rdi)
; CHECK-NEXT:    andq $0, 120(%rdi)
; CHECK-NEXT:    andq $0, 112(%rdi)
; CHECK-NEXT:    andq $0, 104(%rdi)
; CHECK-NEXT:    andq $0, 96(%rdi)
; CHECK-NEXT:    andq $0, 88(%rdi)
; CHECK-NEXT:    andq $0, 80(%rdi)
; CHECK-NEXT:    andq $0, 72(%rdi)
; CHECK-NEXT:    andq $0, 64(%rdi)
; CHECK-NEXT:    andq $0, 56(%rdi)
; CHECK-NEXT:    andq $0, 48(%rdi)
; CHECK-NEXT:    andq $0, 40(%rdi)
; CHECK-NEXT:    andq $0, 32(%rdi)
; CHECK-NEXT:    andq $0, 24(%rdi)
; CHECK-NEXT:    andq $0, 16(%rdi)
; CHECK-NEXT:    andq $0, 8(%rdi)
; CHECK-NEXT:    andq $0, (%rdi)
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.inline.p0.i32(ptr align 1 %ptr, i8 0, i32 256, i1 false)
  ret void
}

define void @align_2_memset_inline_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: align_2_memset_inline_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movl $256, %edx # imm = 0x100
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq memset@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.p0.i32(ptr align 2 %ptr, i8 0, i32 256, i1 false)
  ret void
}

define void @align_4_memset_inline_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: align_4_memset_inline_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andq $0, 248(%rdi)
; CHECK-NEXT:    andq $0, 240(%rdi)
; CHECK-NEXT:    andq $0, 232(%rdi)
; CHECK-NEXT:    andq $0, 224(%rdi)
; CHECK-NEXT:    andq $0, 216(%rdi)
; CHECK-NEXT:    andq $0, 208(%rdi)
; CHECK-NEXT:    andq $0, 200(%rdi)
; CHECK-NEXT:    andq $0, 192(%rdi)
; CHECK-NEXT:    andq $0, 184(%rdi)
; CHECK-NEXT:    andq $0, 176(%rdi)
; CHECK-NEXT:    andq $0, 168(%rdi)
; CHECK-NEXT:    andq $0, 160(%rdi)
; CHECK-NEXT:    andq $0, 152(%rdi)
; CHECK-NEXT:    andq $0, 144(%rdi)
; CHECK-NEXT:    andq $0, 136(%rdi)
; CHECK-NEXT:    andq $0, 128(%rdi)
; CHECK-NEXT:    andq $0, 120(%rdi)
; CHECK-NEXT:    andq $0, 112(%rdi)
; CHECK-NEXT:    andq $0, 104(%rdi)
; CHECK-NEXT:    andq $0, 96(%rdi)
; CHECK-NEXT:    andq $0, 88(%rdi)
; CHECK-NEXT:    andq $0, 80(%rdi)
; CHECK-NEXT:    andq $0, 72(%rdi)
; CHECK-NEXT:    andq $0, 64(%rdi)
; CHECK-NEXT:    andq $0, 56(%rdi)
; CHECK-NEXT:    andq $0, 48(%rdi)
; CHECK-NEXT:    andq $0, 40(%rdi)
; CHECK-NEXT:    andq $0, 32(%rdi)
; CHECK-NEXT:    andq $0, 24(%rdi)
; CHECK-NEXT:    andq $0, 16(%rdi)
; CHECK-NEXT:    andq $0, 8(%rdi)
; CHECK-NEXT:    andq $0, (%rdi)
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.inline.p0.i32(ptr align 4 %ptr, i8 0, i32 256, i1 false)
  ret void
}

define void @align_8_memset_inline_to_rep_stos(ptr %ptr) minsize nounwind {
; CHECK-LABEL: align_8_memset_inline_to_rep_stos:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andq $0, 248(%rdi)
; CHECK-NEXT:    andq $0, 240(%rdi)
; CHECK-NEXT:    andq $0, 232(%rdi)
; CHECK-NEXT:    andq $0, 224(%rdi)
; CHECK-NEXT:    andq $0, 216(%rdi)
; CHECK-NEXT:    andq $0, 208(%rdi)
; CHECK-NEXT:    andq $0, 200(%rdi)
; CHECK-NEXT:    andq $0, 192(%rdi)
; CHECK-NEXT:    andq $0, 184(%rdi)
; CHECK-NEXT:    andq $0, 176(%rdi)
; CHECK-NEXT:    andq $0, 168(%rdi)
; CHECK-NEXT:    andq $0, 160(%rdi)
; CHECK-NEXT:    andq $0, 152(%rdi)
; CHECK-NEXT:    andq $0, 144(%rdi)
; CHECK-NEXT:    andq $0, 136(%rdi)
; CHECK-NEXT:    andq $0, 128(%rdi)
; CHECK-NEXT:    andq $0, 120(%rdi)
; CHECK-NEXT:    andq $0, 112(%rdi)
; CHECK-NEXT:    andq $0, 104(%rdi)
; CHECK-NEXT:    andq $0, 96(%rdi)
; CHECK-NEXT:    andq $0, 88(%rdi)
; CHECK-NEXT:    andq $0, 80(%rdi)
; CHECK-NEXT:    andq $0, 72(%rdi)
; CHECK-NEXT:    andq $0, 64(%rdi)
; CHECK-NEXT:    andq $0, 56(%rdi)
; CHECK-NEXT:    andq $0, 48(%rdi)
; CHECK-NEXT:    andq $0, 40(%rdi)
; CHECK-NEXT:    andq $0, 32(%rdi)
; CHECK-NEXT:    andq $0, 24(%rdi)
; CHECK-NEXT:    andq $0, 16(%rdi)
; CHECK-NEXT:    andq $0, 8(%rdi)
; CHECK-NEXT:    andq $0, (%rdi)
; CHECK-NEXT:    retq
entry:
  call void @llvm.memset.inline.p0.i32(ptr align 8 %ptr, i8 0, i32 256, i1 false)
  ret void
}

declare void @llvm.memset.inline.p0.i32(ptr nocapture writeonly, i8, i32, i1)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1)
