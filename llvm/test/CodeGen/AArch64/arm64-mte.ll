; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=arm64-eabi -mattr=+mte | FileCheck %s

; test create_tag
define ptr @create_tag(ptr %ptr, i32 %m) {
; CHECK-LABEL: create_tag:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w8, w1
; CHECK-NEXT:    irg x0, x0, x8
; CHECK-NEXT:    ret
entry:
  %0 = zext i32 %m to i64
  %1 = tail call ptr @llvm.aarch64.irg(ptr %ptr, i64 %0)
  ret ptr %1
}

; *********** __arm_mte_increment_tag  *************
; test increment_tag1
define ptr @increment_tag1(ptr %ptr) {
; CHECK-LABEL: increment_tag1:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    addg x0, x0, #0, #7
; CHECK-NEXT:    ret
entry:
  %0 = tail call ptr @llvm.aarch64.addg(ptr %ptr, i64 7)
  ret ptr %0
}

%struct.S2K = type { [512 x i32] }
define ptr @increment_tag1stack(ptr %ptr) {
; CHECK-LABEL: increment_tag1stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2048
; CHECK-NEXT:    .cfi_def_cfa_offset 2064
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    addg x0, sp, #0, #7
; CHECK-NEXT:    add sp, sp, #2048
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S2K, align 4
  call void @llvm.lifetime.start.p0(i64 2048, ptr nonnull %s)
  %0 = call ptr @llvm.aarch64.addg(ptr nonnull %s, i64 7)
  call void @llvm.lifetime.end.p0(i64 2048, ptr nonnull %s)
  ret ptr %0
}


define ptr @increment_tag2(ptr %ptr) {
; CHECK-LABEL: increment_tag2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    addg x0, x0, #16, #7
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 4
  %0 = tail call ptr @llvm.aarch64.addg(ptr nonnull %add.ptr, i64 7)
  ret ptr %0
}

define ptr @increment_tag2stack(ptr %ptr) {
; CHECK-LABEL: increment_tag2stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2048
; CHECK-NEXT:    .cfi_def_cfa_offset 2064
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    addg x0, sp, #16, #7
; CHECK-NEXT:    add sp, sp, #2048
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S2K, align 4
  call void @llvm.lifetime.start.p0(i64 2048, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S2K, ptr %s, i64 0, i32 0, i64 4
  %0 = call ptr @llvm.aarch64.addg(ptr nonnull %arrayidx, i64 7)
  call void @llvm.lifetime.end.p0(i64 2048, ptr nonnull %s)
  ret ptr %0
}

define ptr @increment_tag3(ptr %ptr) {
; CHECK-LABEL: increment_tag3:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    addg x0, x0, #1008, #7
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 252
  %0 = tail call ptr @llvm.aarch64.addg(ptr nonnull %add.ptr, i64 7)
  ret ptr %0
}

define ptr @increment_tag3stack(ptr %ptr) {
; CHECK-LABEL: increment_tag3stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2048
; CHECK-NEXT:    .cfi_def_cfa_offset 2064
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    addg x0, sp, #1008, #7
; CHECK-NEXT:    add sp, sp, #2048
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S2K, align 4
  call void @llvm.lifetime.start.p0(i64 2048, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S2K, ptr %s, i64 0, i32 0, i64 252
  %0 = call ptr @llvm.aarch64.addg(ptr nonnull %arrayidx, i64 7)
  call void @llvm.lifetime.end.p0(i64 2048, ptr nonnull %s)
  ret ptr %0
}


define ptr @increment_tag4(ptr %ptr) {
; CHECK-LABEL: increment_tag4:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x0, #1024
; CHECK-NEXT:    addg x0, x8, #0, #7
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 256
  %0 = tail call ptr @llvm.aarch64.addg(ptr nonnull %add.ptr, i64 7)
  ret ptr %0
}

define ptr @increment_tag4stack(ptr %ptr) {
; CHECK-LABEL: increment_tag4stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2048
; CHECK-NEXT:    .cfi_def_cfa_offset 2064
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x8, x8, #1024
; CHECK-NEXT:    addg x0, x8, #0, #7
; CHECK-NEXT:    add sp, sp, #2048
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S2K, align 4
  call void @llvm.lifetime.start.p0(i64 2048, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S2K, ptr %s, i64 0, i32 0, i64 256
  %0 = call ptr @llvm.aarch64.addg(ptr nonnull %arrayidx, i64 7)
  call void @llvm.lifetime.end.p0(i64 2048, ptr nonnull %s)
  ret ptr %0
}


define ptr @increment_tag5(ptr %ptr) {
; CHECK-LABEL: increment_tag5:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x0, #20
; CHECK-NEXT:    addg x0, x8, #0, #7
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 5
  %0 = tail call ptr @llvm.aarch64.addg(ptr nonnull %add.ptr, i64 7)
  ret ptr %0
}

define ptr @increment_tag5stack(ptr %ptr) {
; CHECK-LABEL: increment_tag5stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2048
; CHECK-NEXT:    .cfi_def_cfa_offset 2064
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x8, x8, #20
; CHECK-NEXT:    addg x0, x8, #0, #7
; CHECK-NEXT:    add sp, sp, #2048
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S2K, align 4
  call void @llvm.lifetime.start.p0(i64 2048, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S2K, ptr %s, i64 0, i32 0, i64 5
  %0 = call ptr @llvm.aarch64.addg(ptr nonnull %arrayidx, i64 7)
  call void @llvm.lifetime.end.p0(i64 2048, ptr nonnull %s)
  ret ptr %0
}


; *********** __arm_mte_exclude_tag  *************
; test exclude_tag
define i32 @exclude_tag(ptr %ptr, i32 %m) local_unnamed_addr #0 {
; CHECK-LABEL: exclude_tag:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w8, w1
; CHECK-NEXT:    gmi x0, x0, x8
; CHECK-NEXT:    // kill: def $w0 killed $w0 killed $x0
; CHECK-NEXT:    ret
entry:
  %0 = zext i32 %m to i64
  %1 = tail call i64 @llvm.aarch64.gmi(ptr %ptr, i64 %0)
  %conv = trunc i64 %1 to i32
  ret i32 %conv
}


; *********** __arm_mte_get_tag *************
%struct.S8K = type { [2048 x i32] }
define ptr @get_tag1(ptr %ptr) {
; CHECK-LABEL: get_tag1:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldg x0, [x0]
; CHECK-NEXT:    ret
entry:
  %0 = tail call ptr @llvm.aarch64.ldg(ptr %ptr, ptr %ptr)
  ret ptr %0
}

define ptr @get_tag1_two_parm(ptr %ret_ptr, ptr %ptr) {
; CHECK-LABEL: get_tag1_two_parm:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldg x0, [x1]
; CHECK-NEXT:    ret
entry:
  %0 = tail call ptr @llvm.aarch64.ldg(ptr %ret_ptr, ptr %ptr)
  ret ptr %0
}

define ptr @get_tag1stack() {
; CHECK-LABEL: get_tag1stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov x0, sp
; CHECK-NEXT:    ldg x0, [sp]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  %0 = call ptr @llvm.aarch64.ldg(ptr nonnull %s, ptr nonnull %s)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %s)
  ret ptr %0
}

define ptr @get_tag1stack_two_param(ptr %ret_ptr) {
; CHECK-LABEL: get_tag1stack_two_param:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    ldg x0, [sp]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  %0 = call ptr @llvm.aarch64.ldg(ptr nonnull %ret_ptr, ptr nonnull %s)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %s)
  ret ptr %0
}


define ptr @get_tag2(ptr %ptr) {
; CHECK-LABEL: get_tag2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x0, #16
; CHECK-NEXT:    ldg x8, [x0, #16]
; CHECK-NEXT:    mov x0, x8
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 4
  %0 = tail call ptr @llvm.aarch64.ldg(ptr nonnull %add.ptr, ptr nonnull %add.ptr)
  ret ptr %0
}

define ptr @get_tag2stack() {
; CHECK-LABEL: get_tag2stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x0, x8, #16
; CHECK-NEXT:    ldg x0, [sp, #16]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S8K, ptr %s, i64 0, i32 0, i64 4
  %0 = call ptr @llvm.aarch64.ldg(ptr nonnull %arrayidx, ptr nonnull %arrayidx)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %s)
  ret ptr %0
}


define ptr @get_tag3(ptr %ptr) {
; CHECK-LABEL: get_tag3:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x0, #4080
; CHECK-NEXT:    ldg x8, [x0, #4080]
; CHECK-NEXT:    mov x0, x8
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 1020
  %0 = tail call ptr @llvm.aarch64.ldg(ptr nonnull %add.ptr, ptr nonnull %add.ptr)
  ret ptr %0
}

define ptr @get_tag3stack() {
; CHECK-LABEL: get_tag3stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x0, x8, #4080
; CHECK-NEXT:    ldg x0, [sp, #4080]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S8K, ptr %s, i64 0, i32 0, i64 1020
  %0 = call ptr @llvm.aarch64.ldg(ptr nonnull %arrayidx, ptr nonnull %arrayidx)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %s)
  ret ptr %0
}


define ptr @get_tag4(ptr %ptr) {
; CHECK-LABEL: get_tag4:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x0, x0, #1, lsl #12 // =4096
; CHECK-NEXT:    ldg x0, [x0]
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 1024
  %0 = tail call ptr @llvm.aarch64.ldg(ptr nonnull %add.ptr, ptr nonnull %add.ptr)
  ret ptr %0
}

define ptr @get_tag4stack() {
; CHECK-LABEL: get_tag4stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x0, x8, #1, lsl #12 // =4096
; CHECK-NEXT:    ldg x0, [x0]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S8K, ptr %s, i64 0, i32 0, i64 1024
  %0 = call ptr @llvm.aarch64.ldg(ptr nonnull %arrayidx, ptr nonnull %arrayidx)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %s)
  ret ptr %0
}

define ptr @get_tag5(ptr %ptr) {
; CHECK-LABEL: get_tag5:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x0, x0, #20
; CHECK-NEXT:    ldg x0, [x0]
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 5
  %0 = tail call ptr @llvm.aarch64.ldg(ptr nonnull %add.ptr, ptr nonnull %add.ptr)
  ret ptr %0
}

define ptr @get_tag5stack() {
; CHECK-LABEL: get_tag5stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x0, x8, #20
; CHECK-NEXT:    ldg x0, [x0]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S8K, ptr %s, i64 0, i32 0, i64 5
  %0 = call ptr @llvm.aarch64.ldg(ptr nonnull %arrayidx, ptr nonnull %arrayidx)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %s)
  ret ptr %0
}


; *********** __arm_mte_set_tag  *************
define void @set_tag1(ptr %tag, ptr %ptr) {
; CHECK-LABEL: set_tag1:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    stg x0, [x1]
; CHECK-NEXT:    ret
entry:
  tail call void @llvm.aarch64.stg(ptr %tag, ptr %ptr)
  ret void
}

define void @set_tag1stack(ptr %tag) {
; CHECK-LABEL: set_tag1stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    stg x0, [sp]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  call void @llvm.aarch64.stg(ptr %tag, ptr nonnull %s)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %tag)
  ret void
}


define void @set_tag2(ptr %tag, ptr %ptr) {
; CHECK-LABEL: set_tag2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    stg x0, [x1, #16]
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 4
  tail call void @llvm.aarch64.stg(ptr %tag, ptr %add.ptr)
  ret void
}

define void @set_tag2stack(ptr %tag, ptr %ptr) {
; CHECK-LABEL: set_tag2stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    stg x0, [sp, #16]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S8K, ptr %s, i64 0, i32 0, i64 4
  call void @llvm.aarch64.stg(ptr %tag, ptr nonnull %arrayidx)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %s)
  ret void
}



define void @set_tag3(ptr %tag, ptr %ptr) {
; CHECK-LABEL: set_tag3:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    stg x0, [x1, #4080]
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 1020
  tail call void @llvm.aarch64.stg(ptr %tag, ptr %add.ptr)
  ret void
}

define void @set_tag3stack(ptr %tag, ptr %ptr) {
; CHECK-LABEL: set_tag3stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    stg x0, [sp, #4080]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S8K, ptr %s, i64 0, i32 0, i64 1020
  call void @llvm.aarch64.stg(ptr %tag, ptr nonnull %arrayidx)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %s)
  ret void
}



define void @set_tag4(ptr %tag, ptr %ptr) {
; CHECK-LABEL: set_tag4:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x1, #1, lsl #12 // =4096
; CHECK-NEXT:    stg x0, [x8]
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 1024
  tail call void @llvm.aarch64.stg(ptr %tag, ptr %add.ptr)
  ret void
}

define void @set_tag4stack(ptr %tag, ptr %ptr) {
; CHECK-LABEL: set_tag4stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x8, x8, #1, lsl #12 // =4096
; CHECK-NEXT:    stg x0, [x8]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S8K, ptr %s, i64 0, i32 0, i64 1024
  call void @llvm.aarch64.stg(ptr %tag, ptr nonnull %arrayidx)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %s)
  ret void
}


define void @set_tag5(ptr %tag, ptr %ptr) {
; CHECK-LABEL: set_tag5:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x1, #20
; CHECK-NEXT:    stg x0, [x8]
; CHECK-NEXT:    ret
entry:
  %add.ptr = getelementptr inbounds i32, ptr %ptr, i64 5
  tail call void @llvm.aarch64.stg(ptr %tag, ptr %add.ptr)
  ret void
}

define void @set_tag5stack(ptr %tag, ptr %ptr) {
; CHECK-LABEL: set_tag5stack:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x29, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    sub sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    .cfi_def_cfa_offset 8208
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x8, x8, #20
; CHECK-NEXT:    stg x0, [x8]
; CHECK-NEXT:    add sp, sp, #2, lsl #12 // =8192
; CHECK-NEXT:    ldr x29, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %s = alloca %struct.S8K, align 4
  call void @llvm.lifetime.start.p0(i64 8192, ptr nonnull %s)
  %arrayidx = getelementptr inbounds %struct.S8K, ptr %s, i64 0, i32 0, i64 5
  call void @llvm.aarch64.stg(ptr %tag, ptr nonnull %arrayidx)
  call void @llvm.lifetime.end.p0(i64 8192, ptr nonnull %s)
  ret void
}


; *********** __arm_mte_ptrdiff  *************
define i64 @subtract_pointers(ptr %ptra, ptr %ptrb) {
; CHECK-LABEL: subtract_pointers:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    subp x0, x0, x1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i64 @llvm.aarch64.subp(ptr %ptra, ptr %ptrb)
  ret i64 %0
}

declare ptr @llvm.aarch64.irg(ptr, i64)
declare ptr @llvm.aarch64.addg(ptr, i64)
declare i64 @llvm.aarch64.gmi(ptr, i64)
declare ptr @llvm.aarch64.ldg(ptr, ptr)
declare void @llvm.aarch64.stg(ptr, ptr)
declare i64 @llvm.aarch64.subp(ptr, ptr)

declare void @llvm.lifetime.start.p0(i64, ptr nocapture)
declare void @llvm.lifetime.end.p0(i64, ptr nocapture)
