; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=aarch64 -mattr=+mte | FileCheck %s

define ptr @irg_imm16(ptr %p) {
; CHECK-LABEL: irg_imm16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w8, #16 // =0x10
; CHECK-NEXT:    irg x0, x0, x8
; CHECK-NEXT:    ret
entry:
  %q = call ptr @llvm.aarch64.irg(ptr %p, i64 16)
  ret ptr %q
}

define ptr @irg_imm0(ptr %p) {
; CHECK-LABEL: irg_imm0:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    irg x0, x0
; CHECK-NEXT:    ret
entry:
  %q = call ptr @llvm.aarch64.irg(ptr %p, i64 0)
  ret ptr %q
}

define ptr @irg_reg(ptr %p, i64 %ex) {
; CHECK-LABEL: irg_reg:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    irg x0, x0, x1
; CHECK-NEXT:    ret
entry:
  %q = call ptr @llvm.aarch64.irg(ptr %p, i64 %ex)
  ret ptr %q
}

; undef argument in irg is treated specially
define ptr @irg_sp() {
; CHECK-LABEL: irg_sp:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    irg x0, sp
; CHECK-NEXT:    ret
entry:
  %q = call ptr @llvm.aarch64.irg.sp(i64 0)
  ret ptr %q
}

declare ptr @llvm.aarch64.irg(ptr %p, i64 %exclude)
declare ptr @llvm.aarch64.irg.sp(i64 %exclude)
