; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mattr=-zcz-gp,+no-zcz-fp      | FileCheck %s -check-prefixes=ALL,NONEGP,NONEFP
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mattr=+zcz                    | FileCheck %s -check-prefixes=ALL,ZEROGP,ZEROFP
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mattr=+zcz -mattr=+fullfp16   | FileCheck %s -check-prefixes=ALL,ZEROGP,ZERO16
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mattr=+zcz-gp,+no-zcz-fp      | FileCheck %s -check-prefixes=ALL,ZEROGP,NONEFP
; RUN: llc < %s -mtriple=aarch64-linux-gnu                                | FileCheck %s -check-prefixes=ALL,NONEGP,ZEROFP
; RUN: llc < %s -mtriple=arm64-apple-ios   -mcpu=cyclone                  | FileCheck %s -check-prefixes=ALL,ZEROGP,NONEFP
; RUN: llc < %s -mtriple=arm64-linux-gnu   -mcpu=apple-a10                | FileCheck %s -check-prefixes=ALL,ZEROGP,ZEROFP
; RUN: llc < %s -mtriple=arm64-apple-ios   -mcpu=cyclone -mattr=+fullfp16 | FileCheck %s -check-prefixes=ALL,ZEROGP,NONE16
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mcpu=exynos-m3                | FileCheck %s -check-prefixes=ALL,NONEGP,ZEROFP
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mcpu=kryo                     | FileCheck %s -check-prefixes=ALL,ZEROGP,ZEROFP
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mcpu=falkor                   | FileCheck %s -check-prefixes=ALL,ZEROGP,ZEROFP

declare void @bar(half, float, double, <2 x double>)
declare void @bari(i32, i32)
declare void @barl(i64, i64)
declare void @barf(float, float)

define void @t1() nounwind ssp {
; ZEROFP-LABEL: t1:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi d0, #0000000000000000
; ZEROFP-NEXT:    movi d1, #0000000000000000
; ZEROFP-NEXT:    movi d2, #0000000000000000
; ZEROFP-NEXT:    movi v3.2d, #0000000000000000
; ZEROFP-NEXT:    b bar
;
; ZERO16-LABEL: t1:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi d0, #0000000000000000
; ZERO16-NEXT:    movi d1, #0000000000000000
; ZERO16-NEXT:    movi d2, #0000000000000000
; ZERO16-NEXT:    movi v3.2d, #0000000000000000
; ZERO16-NEXT:    b bar
;
; NONE16-LABEL: t1:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    fmov h0, wzr
; NONE16-NEXT:    fmov s1, wzr
; NONE16-NEXT:    fmov d2, xzr
; NONE16-NEXT:    movi.16b v3, #0
; NONE16-NEXT:    b _bar
entry:
  tail call void @bar(half 0.000000e+00, float 0.000000e+00, double 0.000000e+00, <2 x double> <double 0.000000e+00, double 0.000000e+00>) nounwind
  ret void
}

define void @t2() nounwind ssp {
; NONEGP-LABEL: t2:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    mov w0, wzr
; NONEGP-NEXT:    mov w1, wzr
; NONEGP-NEXT:    b bari
;
; ZERO16-LABEL: t2:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    mov w0, #0 // =0x0
; ZERO16-NEXT:    mov w1, #0 // =0x0
; ZERO16-NEXT:    b bari
;
; NONE16-LABEL: t2:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    mov w0, #0 ; =0x0
; NONE16-NEXT:    mov w1, #0 ; =0x0
; NONE16-NEXT:    b _bari
entry:
  tail call void @bari(i32 0, i32 0) nounwind
  ret void
}

define void @t3() nounwind ssp {
; NONEGP-LABEL: t3:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    mov x0, xzr
; NONEGP-NEXT:    mov x1, xzr
; NONEGP-NEXT:    b barl
;
; ZERO16-LABEL: t3:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    mov x0, #0 // =0x0
; ZERO16-NEXT:    mov x1, #0 // =0x0
; ZERO16-NEXT:    b barl
;
; NONE16-LABEL: t3:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    mov x0, #0 ; =0x0
; NONE16-NEXT:    mov x1, #0 ; =0x0
; NONE16-NEXT:    b _barl
entry:
  tail call void @barl(i64 0, i64 0) nounwind
  ret void
}

define void @t4() nounwind ssp {
; ZEROFP-LABEL: t4:
; ZEROFP:       // %bb.0:
; ZEROFP-NEXT:    movi d0, #0000000000000000
; ZEROFP-NEXT:    movi d1, #0000000000000000
; ZEROFP-NEXT:    b barf
;
; ZERO16-LABEL: t4:
; ZERO16:       // %bb.0:
; ZERO16-NEXT:    movi d0, #0000000000000000
; ZERO16-NEXT:    movi d1, #0000000000000000
; ZERO16-NEXT:    b barf
;
; NONE16-LABEL: t4:
; NONE16:       ; %bb.0:
; NONE16-NEXT:    fmov s0, wzr
; NONE16-NEXT:    fmov s1, wzr
; NONE16-NEXT:    b _barf
  tail call void @barf(float 0.000000e+00, float 0.000000e+00) nounwind
  ret void
}

declare double @sin(double)

; We used to produce spills+reloads for a Q register with zero cycle zeroing
; enabled.
; ALL-LABEL: foo:
; ALL-NOT: str q{{[0-9]+}}
; ALL-NOT: ldr q{{[0-9]+}}
define double @foo(i32 %n) {
; ZERO16-LABEL: foo:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    str d10, [sp, #-48]! // 8-byte Folded Spill
; ZERO16-NEXT:    stp d9, d8, [sp, #8] // 16-byte Folded Spill
; ZERO16-NEXT:    str x30, [sp, #24] // 8-byte Folded Spill
; ZERO16-NEXT:    stp x20, x19, [sp, #32] // 16-byte Folded Spill
; ZERO16-NEXT:    .cfi_def_cfa_offset 48
; ZERO16-NEXT:    .cfi_offset w19, -8
; ZERO16-NEXT:    .cfi_offset w20, -16
; ZERO16-NEXT:    .cfi_offset w30, -24
; ZERO16-NEXT:    .cfi_offset b8, -32
; ZERO16-NEXT:    .cfi_offset b9, -40
; ZERO16-NEXT:    .cfi_offset b10, -48
; ZERO16-NEXT:    movi d8, #0000000000000000
; ZERO16-NEXT:    fmov d10, #1.00000000
; ZERO16-NEXT:    mov w19, w0
; ZERO16-NEXT:    fmov d9, #1.00000000
; ZERO16-NEXT:    mov w20, #0 // =0x0
; ZERO16-NEXT:  .LBB4_1: // %for.body
; ZERO16-NEXT:    // =>This Inner Loop Header: Depth=1
; ZERO16-NEXT:    fmov d0, d8
; ZERO16-NEXT:    bl sin
; ZERO16-NEXT:    fadd d8, d8, d10
; ZERO16-NEXT:    fmaxnm d9, d9, d0
; ZERO16-NEXT:    add w20, w20, #1
; ZERO16-NEXT:    cmp w20, w19
; ZERO16-NEXT:    b.lt .LBB4_1
; ZERO16-NEXT:  // %bb.2: // %for.end
; ZERO16-NEXT:    fmov d0, d9
; ZERO16-NEXT:    ldp x20, x19, [sp, #32] // 16-byte Folded Reload
; ZERO16-NEXT:    ldp d9, d8, [sp, #8] // 16-byte Folded Reload
; ZERO16-NEXT:    ldr x30, [sp, #24] // 8-byte Folded Reload
; ZERO16-NEXT:    ldr d10, [sp], #48 // 8-byte Folded Reload
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: foo:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    stp d11, d10, [sp, #-64]! ; 16-byte Folded Spill
; NONE16-NEXT:    stp d9, d8, [sp, #16] ; 16-byte Folded Spill
; NONE16-NEXT:    stp x20, x19, [sp, #32] ; 16-byte Folded Spill
; NONE16-NEXT:    stp x29, x30, [sp, #48] ; 16-byte Folded Spill
; NONE16-NEXT:    .cfi_def_cfa_offset 64
; NONE16-NEXT:    .cfi_offset w30, -8
; NONE16-NEXT:    .cfi_offset w29, -16
; NONE16-NEXT:    .cfi_offset w19, -24
; NONE16-NEXT:    .cfi_offset w20, -32
; NONE16-NEXT:    .cfi_offset b8, -40
; NONE16-NEXT:    .cfi_offset b9, -48
; NONE16-NEXT:    .cfi_offset b10, -56
; NONE16-NEXT:    .cfi_offset b11, -64
; NONE16-NEXT:    mov x19, x0
; NONE16-NEXT:    mov w20, #0 ; =0x0
; NONE16-NEXT:    fmov d8, xzr
; NONE16-NEXT:    fmov d10, #1.00000000
; NONE16-NEXT:    fmov d9, #1.00000000
; NONE16-NEXT:  LBB4_1: ; %for.body
; NONE16-NEXT:    ; =>This Inner Loop Header: Depth=1
; NONE16-NEXT:    fmov d0, d8
; NONE16-NEXT:    bl _sin
; NONE16-NEXT:    fmaxnm d9, d9, d0
; NONE16-NEXT:    fadd d8, d8, d10
; NONE16-NEXT:    add w20, w20, #1
; NONE16-NEXT:    cmp w20, w19
; NONE16-NEXT:    b.lt LBB4_1
; NONE16-NEXT:  ; %bb.2: ; %for.end
; NONE16-NEXT:    fmov d0, d9
; NONE16-NEXT:    ldp x29, x30, [sp, #48] ; 16-byte Folded Reload
; NONE16-NEXT:    ldp x20, x19, [sp, #32] ; 16-byte Folded Reload
; NONE16-NEXT:    ldp d9, d8, [sp, #16] ; 16-byte Folded Reload
; NONE16-NEXT:    ldp d11, d10, [sp], #64 ; 16-byte Folded Reload
; NONE16-NEXT:    ret
entry:
  br label %for.body

for.body:
  %phi0 = phi double [ 1.0, %entry ], [ %v0, %for.body ]
  %i.076 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %conv21 = sitofp i32 %i.076 to double
  %call = tail call fast double @sin(double %conv21)
  %cmp.i = fcmp fast olt double %phi0, %call
  %v0 = select i1 %cmp.i, double %call, double %phi0
  %inc = add nuw nsw i32 %i.076, 1
  %cmp = icmp slt i32 %inc, %n
  br i1 %cmp, label %for.body, label %for.end

for.end:
  ret double %v0
}

define <2 x i64> @t6() {
; NONEGP-LABEL: t6:
; NONEGP:       // %bb.0:
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: t6:
; ZEROFP:       // %bb.0:
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: t6:
; ZERO16:       // %bb.0:
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: t6:
; NONE16:       ; %bb.0:
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
  ret <2 x i64> zeroinitializer
}

define i1 @ti1() {
; NONEGP-LABEL: ti1:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    mov w0, wzr
; NONEGP-NEXT:    ret
;
; ZERO16-LABEL: ti1:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    mov w0, #0 // =0x0
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: ti1:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    mov w0, #0 ; =0x0
; NONE16-NEXT:    ret
entry:
  ret i1 false
}

define i8 @ti8() {
; NONEGP-LABEL: ti8:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    mov w0, wzr
; NONEGP-NEXT:    ret
;
; ZERO16-LABEL: ti8:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    mov w0, #0 // =0x0
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: ti8:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    mov w0, #0 ; =0x0
; NONE16-NEXT:    ret
entry:
  ret i8 0
}

define i16 @ti16() {
; NONEGP-LABEL: ti16:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    mov w0, wzr
; NONEGP-NEXT:    ret
;
; ZERO16-LABEL: ti16:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    mov w0, #0 // =0x0
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: ti16:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    mov w0, #0 ; =0x0
; NONE16-NEXT:    ret
entry:
  ret i16 0
}

define i32 @ti32() {
; NONEGP-LABEL: ti32:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    mov w0, wzr
; NONEGP-NEXT:    ret
;
; ZERO16-LABEL: ti32:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    mov w0, #0 // =0x0
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: ti32:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    mov w0, #0 ; =0x0
; NONE16-NEXT:    ret
entry:
  ret i32 0
}

define i64 @ti64() {
; NONEGP-LABEL: ti64:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    mov x0, xzr
; NONEGP-NEXT:    ret
;
; ZERO16-LABEL: ti64:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    mov x0, #0 // =0x0
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: ti64:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    mov x0, #0 ; =0x0
; NONE16-NEXT:    ret
entry:
  ret i64 0
}

define float @tf32() {
; ZEROFP-LABEL: tf32:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi d0, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tf32:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi d0, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tf32:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    fmov s0, wzr
; NONE16-NEXT:    ret
entry:
  ret float 0.0
}

define double @td64() {
; ZEROFP-LABEL: td64:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi d0, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: td64:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi d0, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: td64:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    fmov d0, xzr
; NONE16-NEXT:    ret
entry:
  ret double 0.0
}

define <8 x i8> @tv8i8() {
; NONEGP-LABEL: tv8i8:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: tv8i8:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tv8i8:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tv8i8:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
entry:
  ret <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
}

define <4 x i16> @tv4i16() {
; NONEGP-LABEL: tv4i16:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: tv4i16:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tv4i16:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tv4i16:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
entry:
  ret <4 x i16> <i16 0, i16 0, i16 0, i16 0>
}

define <2 x i32> @tv2i32() {
; NONEGP-LABEL: tv2i32:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: tv2i32:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tv2i32:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tv2i32:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
entry:
  ret <2 x i32> <i32 0, i32 0>
}

define <2 x float> @tv2f32() {
; NONEGP-LABEL: tv2f32:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: tv2f32:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tv2f32:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tv2f32:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
entry:
  ret <2 x float> <float 0.0, float 0.0>
}

define <16 x i8> @tv16i8() {
; NONEGP-LABEL: tv16i8:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: tv16i8:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tv16i8:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tv16i8:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
entry:
  ret <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
}

define <8 x i16> @tv8i16() {
; NONEGP-LABEL: tv8i16:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: tv8i16:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tv8i16:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tv8i16:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
entry:
  ret <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>
}

define <4 x i32> @tv4i32() {
; NONEGP-LABEL: tv4i32:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: tv4i32:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tv4i32:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tv4i32:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
entry:
  ret <4 x i32> <i32 0, i32 0, i32 0, i32 0>
}

define <2 x i64> @tv2i64() {
; NONEGP-LABEL: tv2i64:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: tv2i64:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tv2i64:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tv2i64:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
entry:
  ret <2 x i64> <i64 0, i64 0>
}

define <4 x float> @tv4f32() {
; NONEGP-LABEL: tv4f32:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: tv4f32:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tv4f32:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tv4f32:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
entry:
  ret <4 x float> <float 0.0, float 0.0, float 0.0, float 0.0>
}

define <2 x double> @tv2d64() {
; NONEGP-LABEL: tv2d64:
; NONEGP:       // %bb.0: // %entry
; NONEGP-NEXT:    movi v0.2d, #0000000000000000
; NONEGP-NEXT:    ret
;
; ZEROFP-LABEL: tv2d64:
; ZEROFP:       // %bb.0: // %entry
; ZEROFP-NEXT:    movi v0.2d, #0000000000000000
; ZEROFP-NEXT:    ret
;
; ZERO16-LABEL: tv2d64:
; ZERO16:       // %bb.0: // %entry
; ZERO16-NEXT:    movi v0.2d, #0000000000000000
; ZERO16-NEXT:    ret
;
; NONE16-LABEL: tv2d64:
; NONE16:       ; %bb.0: ; %entry
; NONE16-NEXT:    movi.16b v0, #0
; NONE16-NEXT:    ret
entry:
  ret <2 x double> <double 0.0, double 0.0>
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; ALL: {{.*}}
; NONEFP: {{.*}}
; ZEROGP: {{.*}}
