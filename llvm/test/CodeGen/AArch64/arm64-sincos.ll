; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=arm64-apple-ios7 | FileCheck %s --check-prefix CHECK-IOS
; RUN: llc < %s -mtriple=arm64-linux-gnu | FileCheck %s --check-prefix CHECK-LINUX
; RUN: llc < %s -mtriple=arm64-linux-android | FileCheck %s --check-prefix CHECK-LINUX

; Combine sin / cos into a single call unless they may write errno (as
; captured by readnone attrbiute, controlled by clang -fmath-errno
; setting).
; rdar://12856873

define float @test1(float %x) nounwind {
; CHECK-IOS-LABEL: test1:
; CHECK-IOS:       ; %bb.0: ; %entry
; CHECK-IOS-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill
; CHECK-IOS-NEXT:    bl ___sincosf_stret
; CHECK-IOS-NEXT:    fadd s0, s0, s1
; CHECK-IOS-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload
; CHECK-IOS-NEXT:    ret
;
; CHECK-LINUX-LABEL: test1:
; CHECK-LINUX:       // %bb.0: // %entry
; CHECK-LINUX-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-LINUX-NEXT:    add x0, sp, #12
; CHECK-LINUX-NEXT:    add x1, sp, #8
; CHECK-LINUX-NEXT:    bl sincosf
; CHECK-LINUX-NEXT:    ldp s0, s1, [sp, #8]
; CHECK-LINUX-NEXT:    fadd s0, s1, s0
; CHECK-LINUX-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-LINUX-NEXT:    ret
entry:


  %call = tail call float @sinf(float %x) readnone
  %call1 = tail call float @cosf(float %x) readnone
  %add = fadd float %call, %call1
  ret float %add
}

define float @test1_errno(float %x) nounwind {
; CHECK-IOS-LABEL: test1_errno:
; CHECK-IOS:       ; %bb.0: ; %entry
; CHECK-IOS-NEXT:    stp d9, d8, [sp, #-32]! ; 16-byte Folded Spill
; CHECK-IOS-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill
; CHECK-IOS-NEXT:    fmov s8, s0
; CHECK-IOS-NEXT:    bl _sinf
; CHECK-IOS-NEXT:    fmov s9, s0
; CHECK-IOS-NEXT:    fmov s0, s8
; CHECK-IOS-NEXT:    bl _cosf
; CHECK-IOS-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload
; CHECK-IOS-NEXT:    fadd s0, s9, s0
; CHECK-IOS-NEXT:    ldp d9, d8, [sp], #32 ; 16-byte Folded Reload
; CHECK-IOS-NEXT:    ret
;
; CHECK-LINUX-LABEL: test1_errno:
; CHECK-LINUX:       // %bb.0: // %entry
; CHECK-LINUX-NEXT:    stp d9, d8, [sp, #-32]! // 16-byte Folded Spill
; CHECK-LINUX-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; CHECK-LINUX-NEXT:    fmov s8, s0
; CHECK-LINUX-NEXT:    bl sinf
; CHECK-LINUX-NEXT:    fmov s9, s0
; CHECK-LINUX-NEXT:    fmov s0, s8
; CHECK-LINUX-NEXT:    bl cosf
; CHECK-LINUX-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; CHECK-LINUX-NEXT:    fadd s0, s9, s0
; CHECK-LINUX-NEXT:    ldp d9, d8, [sp], #32 // 16-byte Folded Reload
; CHECK-LINUX-NEXT:    ret
entry:


  %call = tail call float @sinf(float %x)
  %call1 = tail call float @cosf(float %x)
  %add = fadd float %call, %call1
  ret float %add
}

define double @test2(double %x) nounwind {
; CHECK-IOS-LABEL: test2:
; CHECK-IOS:       ; %bb.0: ; %entry
; CHECK-IOS-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill
; CHECK-IOS-NEXT:    bl ___sincos_stret
; CHECK-IOS-NEXT:    fadd d0, d0, d1
; CHECK-IOS-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload
; CHECK-IOS-NEXT:    ret
;
; CHECK-LINUX-LABEL: test2:
; CHECK-LINUX:       // %bb.0: // %entry
; CHECK-LINUX-NEXT:    sub sp, sp, #32
; CHECK-LINUX-NEXT:    add x0, sp, #24
; CHECK-LINUX-NEXT:    add x1, sp, #8
; CHECK-LINUX-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; CHECK-LINUX-NEXT:    bl sincos
; CHECK-LINUX-NEXT:    ldr d0, [sp, #8]
; CHECK-LINUX-NEXT:    ldr d1, [sp, #24]
; CHECK-LINUX-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; CHECK-LINUX-NEXT:    fadd d0, d1, d0
; CHECK-LINUX-NEXT:    add sp, sp, #32
; CHECK-LINUX-NEXT:    ret
entry:


  %call = tail call double @sin(double %x) readnone
  %call1 = tail call double @cos(double %x) readnone
  %add = fadd double %call, %call1
  ret double %add
}

define double @test2_errno(double %x) nounwind {
; CHECK-IOS-LABEL: test2_errno:
; CHECK-IOS:       ; %bb.0: ; %entry
; CHECK-IOS-NEXT:    stp d9, d8, [sp, #-32]! ; 16-byte Folded Spill
; CHECK-IOS-NEXT:    stp x29, x30, [sp, #16] ; 16-byte Folded Spill
; CHECK-IOS-NEXT:    fmov d8, d0
; CHECK-IOS-NEXT:    bl _sin
; CHECK-IOS-NEXT:    fmov d9, d0
; CHECK-IOS-NEXT:    fmov d0, d8
; CHECK-IOS-NEXT:    bl _cos
; CHECK-IOS-NEXT:    ldp x29, x30, [sp, #16] ; 16-byte Folded Reload
; CHECK-IOS-NEXT:    fadd d0, d9, d0
; CHECK-IOS-NEXT:    ldp d9, d8, [sp], #32 ; 16-byte Folded Reload
; CHECK-IOS-NEXT:    ret
;
; CHECK-LINUX-LABEL: test2_errno:
; CHECK-LINUX:       // %bb.0: // %entry
; CHECK-LINUX-NEXT:    stp d9, d8, [sp, #-32]! // 16-byte Folded Spill
; CHECK-LINUX-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; CHECK-LINUX-NEXT:    fmov d8, d0
; CHECK-LINUX-NEXT:    bl sin
; CHECK-LINUX-NEXT:    fmov d9, d0
; CHECK-LINUX-NEXT:    fmov d0, d8
; CHECK-LINUX-NEXT:    bl cos
; CHECK-LINUX-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; CHECK-LINUX-NEXT:    fadd d0, d9, d0
; CHECK-LINUX-NEXT:    ldp d9, d8, [sp], #32 // 16-byte Folded Reload
; CHECK-LINUX-NEXT:    ret
entry:


  %call = tail call double @sin(double %x)
  %call1 = tail call double @cos(double %x)
  %add = fadd double %call, %call1
  ret double %add
}

declare float  @sinf(float)
declare double @sin(double)
declare float @cosf(float)
declare double @cos(double)
