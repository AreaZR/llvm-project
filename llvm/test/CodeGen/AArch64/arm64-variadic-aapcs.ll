; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -aarch64-load-store-renaming=true -verify-machineinstrs -mtriple=arm64-linux-gnu -pre-RA-sched=linearize -enable-misched=false -disable-post-ra < %s | FileCheck %s

%va_list = type {ptr, ptr, ptr, i32, i32}

@var = dso_local global %va_list zeroinitializer, align 8

declare void @llvm.va_start(ptr)

define dso_local void @test_simple(i32 %n, ...) {
; CHECK-LABEL: test_simple:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #192
; CHECK-NEXT:    .cfi_def_cfa_offset 192
; CHECK-NEXT:    add x8, sp, #192
; CHECK-NEXT:    adrp x9, var
; CHECK-NEXT:    add x9, x9, :lo12:var
; CHECK-NEXT:    stp q6, q7, [sp, #96]
; CHECK-NEXT:    stp q4, q5, [sp, #64]
; CHECK-NEXT:    stp q2, q3, [sp, #32]
; CHECK-NEXT:    stp q0, q1, [sp]
; CHECK-NEXT:    stp x6, x7, [sp, #176]
; CHECK-NEXT:    stp x4, x5, [sp, #160]
; CHECK-NEXT:    stp x2, x3, [sp, #144]
; CHECK-NEXT:    str x1, [sp, #136]
; CHECK-NEXT:    str x8, [x9]
; CHECK-NEXT:    add x8, sp, #136
; CHECK-NEXT:    add x10, x8, #56
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x8, x8, #128
; CHECK-NEXT:    stp x10, x8, [x9, #8]
; CHECK-NEXT:    mov x8, #-56 // =0xffffffffffffffc8
; CHECK-NEXT:    movk x8, #65408, lsl #32
; CHECK-NEXT:    str x8, [x9, #24]
; CHECK-NEXT:    add sp, sp, #192
; CHECK-NEXT:    ret


; ... omit middle ones ...

; ... omit middle ones ...






  call void @llvm.va_start(ptr @var)

  ret void
}

define dso_local void @test_fewargs(i32 %n, i32 %n1, i32 %n2, float %m, ...) {
; CHECK-LABEL: test_fewargs:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #160
; CHECK-NEXT:    .cfi_def_cfa_offset 160
; CHECK-NEXT:    add x8, sp, #160
; CHECK-NEXT:    adrp x9, var
; CHECK-NEXT:    add x9, x9, :lo12:var
; CHECK-NEXT:    stp q6, q7, [sp, #80]
; CHECK-NEXT:    stp q4, q5, [sp, #48]
; CHECK-NEXT:    stp q2, q3, [sp, #16]
; CHECK-NEXT:    str q1, [sp]
; CHECK-NEXT:    stp x6, x7, [sp, #144]
; CHECK-NEXT:    stp x4, x5, [sp, #128]
; CHECK-NEXT:    str x3, [sp, #120]
; CHECK-NEXT:    str x8, [x9]
; CHECK-NEXT:    add x8, sp, #120
; CHECK-NEXT:    add x10, x8, #40
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x8, x8, #112
; CHECK-NEXT:    stp x10, x8, [x9, #8]
; CHECK-NEXT:    mov x8, #-40 // =0xffffffffffffffd8
; CHECK-NEXT:    movk x8, #65424, lsl #32
; CHECK-NEXT:    str x8, [x9, #24]
; CHECK-NEXT:    add sp, sp, #160
; CHECK-NEXT:    ret


; ... omit middle ones ...

; ... omit middle ones ...





  call void @llvm.va_start(ptr @var)

  ret void
}

define dso_local void @test_nospare([8 x i64], [8 x float], ...) {
; CHECK-LABEL: test_nospare:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    adrp x9, var
; CHECK-NEXT:    add x9, x9, :lo12:var
; CHECK-NEXT:    str x8, [x9]
; CHECK-NEXT:    str xzr, [x9, #24]
; CHECK-NEXT:    ret

  call void @llvm.va_start(ptr @var)

  ret void
}

; If there are non-variadic arguments on the stack (here two i64s) then the
; __stack field should point just past them.
define dso_local void @test_offsetstack([8 x i64], [2 x i64], [3 x float], ...) {
; CHECK-LABEL: test_offsetstack:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #80
; CHECK-NEXT:    .cfi_def_cfa_offset 80
; CHECK-NEXT:    mov x8, #281131379326976 // =0xffb000000000
; CHECK-NEXT:    movk x8, #65535, lsl #48
; CHECK-NEXT:    adrp x9, var
; CHECK-NEXT:    add x9, x9, :lo12:var
; CHECK-NEXT:    stp q6, q7, [sp, #48]
; CHECK-NEXT:    stp q4, q5, [sp, #16]
; CHECK-NEXT:    str q3, [sp]
; CHECK-NEXT:    str x8, [x9, #24]
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    add x8, x8, #80
; CHECK-NEXT:    str x8, [x9, #16]
; CHECK-NEXT:    add x8, sp, #96
; CHECK-NEXT:    str x8, [x9]
; CHECK-NEXT:    add sp, sp, #80
; CHECK-NEXT:    ret


  call void @llvm.va_start(ptr @var)
  ret void
}

declare void @llvm.va_end(ptr)

define dso_local void @test_va_end() nounwind {
; CHECK-LABEL: test_va_end:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ret

  call void @llvm.va_end(ptr @var)

  ret void
}

declare void @llvm.va_copy(ptr %dest, ptr %src)

@second_list = dso_local global %va_list zeroinitializer

define dso_local void @test_va_copy() {
; CHECK-LABEL: test_va_copy:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, var
; CHECK-NEXT:    add x8, x8, :lo12:var
; CHECK-NEXT:    ldp q0, q1, [x8]
; CHECK-NEXT:    adrp x9, second_list
; CHECK-NEXT:    add x9, x9, :lo12:second_list
; CHECK-NEXT:    stp q0, q1, [x9]
; CHECK-NEXT:    ret
  call void @llvm.va_copy(ptr @second_list, ptr @var)


  ret void
}
