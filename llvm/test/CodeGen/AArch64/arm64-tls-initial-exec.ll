; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=arm64-none-linux-gnu -verify-machineinstrs -show-mc-encoding < %s | FileCheck %s
; RUN: llc -mtriple=arm64-none-linux-gnu -filetype=obj < %s | llvm-objdump -r - | FileCheck --check-prefix=CHECK-RELOC %s
; RUN: llc -mtriple=arm64-none-linux-gnu -verify-machineinstrs -show-mc-encoding -code-model=tiny < %s | FileCheck %s --check-prefix=CHECK-TINY
; RUN: llc -mtriple=arm64-none-linux-gnu -filetype=obj < %s -code-model=tiny | llvm-objdump -r - | FileCheck --check-prefix=CHECK-TINY-RELOC %s
; FIXME: We currently error for the large code model
; RUN: not --crash llc -mtriple=arm64-none-linux-gnu -verify-machineinstrs -show-mc-encoding -code-model=large < %s 2>&1 | FileCheck %s --check-prefix=CHECK-LARGE

; CHECK-LARGE: ELF TLS only supported in small memory model

@initial_exec_var = external thread_local(initialexec) global i32

define i32 @test_initial_exec() {
; CHECK-LABEL: test_initial_exec:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, :gottprel:initial_exec_var // encoding: [0x08'A',A,A,0x90'A']
; CHECK-NEXT:    // fixup A - offset: 0, value: :gottprel:initial_exec_var, kind: fixup_aarch64_pcrel_adrp_imm21
; CHECK-NEXT:    ldr x8, [x8, :gottprel_lo12:initial_exec_var] // encoding: [0x08,0bAAAAAA01,0b01AAAAAA,0xf9]
; CHECK-NEXT:    // fixup A - offset: 0, value: :gottprel_lo12:initial_exec_var, kind: fixup_aarch64_ldst_imm12_scale8
; CHECK-NEXT:    mrs x9, TPIDR_EL0 // encoding: [0x49,0xd0,0x3b,0xd5]
; CHECK-NEXT:    ldr w0, [x9, x8] // encoding: [0x20,0x69,0x68,0xb8]
; CHECK-NEXT:    ret // encoding: [0xc0,0x03,0x5f,0xd6]
;
; CHECK-TINY-LABEL: test_initial_exec:
; CHECK-TINY:       // %bb.0:
; CHECK-TINY-NEXT:    ldr x8, :gottprel:initial_exec_var // encoding: [0bAAA01000,A,A,0x58]
; CHECK-TINY-NEXT:    // fixup A - offset: 0, value: :gottprel:initial_exec_var, kind: fixup_aarch64_ldr_pcrel_imm19
; CHECK-TINY-NEXT:    mrs x9, TPIDR_EL0 // encoding: [0x49,0xd0,0x3b,0xd5]
; CHECK-TINY-NEXT:    ldr w0, [x9, x8] // encoding: [0x20,0x69,0x68,0xb8]
; CHECK-TINY-NEXT:    ret // encoding: [0xc0,0x03,0x5f,0xd6]
  %val = load i32, ptr @initial_exec_var


; CHECK-RELOC: R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
; CHECK-RELOC: R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC


; CHECK-TINY-RELOC: R_AARCH64_TLSIE_LD_GOTTPREL_PREL19

  ret i32 %val
}

define ptr @test_initial_exec_addr() {
; CHECK-LABEL: test_initial_exec_addr:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, :gottprel:initial_exec_var // encoding: [0x08'A',A,A,0x90'A']
; CHECK-NEXT:    // fixup A - offset: 0, value: :gottprel:initial_exec_var, kind: fixup_aarch64_pcrel_adrp_imm21
; CHECK-NEXT:    ldr x8, [x8, :gottprel_lo12:initial_exec_var] // encoding: [0x08,0bAAAAAA01,0b01AAAAAA,0xf9]
; CHECK-NEXT:    // fixup A - offset: 0, value: :gottprel_lo12:initial_exec_var, kind: fixup_aarch64_ldst_imm12_scale8
; CHECK-NEXT:    mrs x9, TPIDR_EL0 // encoding: [0x49,0xd0,0x3b,0xd5]
; CHECK-NEXT:    add x0, x9, x8 // encoding: [0x20,0x01,0x08,0x8b]
; CHECK-NEXT:    ret // encoding: [0xc0,0x03,0x5f,0xd6]
;
; CHECK-TINY-LABEL: test_initial_exec_addr:
; CHECK-TINY:       // %bb.0:
; CHECK-TINY-NEXT:    ldr x8, :gottprel:initial_exec_var // encoding: [0bAAA01000,A,A,0x58]
; CHECK-TINY-NEXT:    // fixup A - offset: 0, value: :gottprel:initial_exec_var, kind: fixup_aarch64_ldr_pcrel_imm19
; CHECK-TINY-NEXT:    mrs x9, TPIDR_EL0 // encoding: [0x49,0xd0,0x3b,0xd5]
; CHECK-TINY-NEXT:    add x0, x9, x8 // encoding: [0x20,0x01,0x08,0x8b]
; CHECK-TINY-NEXT:    ret // encoding: [0xc0,0x03,0x5f,0xd6]
  ret ptr @initial_exec_var


; CHECK-RELOC: R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
; CHECK-RELOC: R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC


; CHECK-TINY-RELOC: R_AARCH64_TLSIE_LD_GOTTPREL_PREL19

}
