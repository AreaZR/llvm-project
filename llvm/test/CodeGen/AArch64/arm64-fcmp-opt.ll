; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=arm64-eabi -mcpu=cyclone -aarch64-neon-syntax=apple | FileCheck %s
; rdar://10263824

define i1 @fcmp_float1(float %a) nounwind ssp {
; CHECK-LABEL: fcmp_float1:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fcmp s0, #0.0
; CHECK-NEXT:    cset w0, ne
; CHECK-NEXT:    ret
entry:
  %cmp = fcmp une float %a, 0.000000e+00
  ret i1 %cmp
}

define i1 @fcmp_float2(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_float2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    cset w0, ne
; CHECK-NEXT:    ret
entry:
  %cmp = fcmp une float %a, %b
  ret i1 %cmp
}

define i1 @fcmp_double1(double %a) nounwind ssp {
; CHECK-LABEL: fcmp_double1:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fcmp d0, #0.0
; CHECK-NEXT:    cset w0, ne
; CHECK-NEXT:    ret
entry:
  %cmp = fcmp une double %a, 0.000000e+00
  ret i1 %cmp
}

define i1 @fcmp_double2(double %a, double %b) nounwind ssp {
; CHECK-LABEL: fcmp_double2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fcmp d0, d1
; CHECK-NEXT:    cset w0, ne
; CHECK-NEXT:    ret
entry:
  %cmp = fcmp une double %a, %b
  ret i1 %cmp
}

; Check each fcmp condition
define float @fcmp_oeq(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_oeq:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, eq
; CHECK-NEXT:    ret

  %cmp = fcmp oeq float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_ogt(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_ogt:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, gt
; CHECK-NEXT:    ret

  %cmp = fcmp ogt float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_oge(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_oge:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, ge
; CHECK-NEXT:    ret

  %cmp = fcmp oge float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_olt(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_olt:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, mi
; CHECK-NEXT:    ret

  %cmp = fcmp olt float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_ole(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_ole:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, ls
; CHECK-NEXT:    ret

  %cmp = fcmp ole float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_ord(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_ord:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, vc
; CHECK-NEXT:    ret
  %cmp = fcmp ord float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_uno(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_uno:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, vs
; CHECK-NEXT:    ret
  %cmp = fcmp uno float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_ugt(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_ugt:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, hi
; CHECK-NEXT:    ret
  %cmp = fcmp ugt float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_uge(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_uge:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, pl
; CHECK-NEXT:    ret
  %cmp = fcmp uge float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_ult(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_ult:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, lt
; CHECK-NEXT:    ret
  %cmp = fcmp ult float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_ule(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_ule:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, le
; CHECK-NEXT:    ret
  %cmp = fcmp ule float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

define float @fcmp_une(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_une:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, ne
; CHECK-NEXT:    ret
  %cmp = fcmp une float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

; Possible opportunity for improvement.  See comment in
; ARM64TargetLowering::LowerSETCC()
define float @fcmp_one(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_one:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, mi
; CHECK-NEXT:    fcsel s0, s1, s0, gt
; CHECK-NEXT:    ret
;	fcmp	s0, s1
  %cmp = fcmp one float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}

; Possible opportunity for improvement.  See comment in
; ARM64TargetLowering::LowerSETCC()
define float @fcmp_ueq(float %a, float %b) nounwind ssp {
; CHECK-LABEL: fcmp_ueq:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    fmov s0, wzr
; CHECK-NEXT:    fmov s1, #1.00000000
; CHECK-NEXT:    fcsel s0, s1, s0, eq
; CHECK-NEXT:    fcsel s0, s1, s0, vs
; CHECK-NEXT:    ret
  %cmp = fcmp ueq float %a, %b
  %conv = uitofp i1 %cmp to float
  ret float %conv
}
