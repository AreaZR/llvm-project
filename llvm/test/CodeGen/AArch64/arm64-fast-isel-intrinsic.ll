; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -O0 -fast-isel -fast-isel-abort=1 -verify-machineinstrs -relocation-model=dynamic-no-pic -mtriple=arm64-apple-ios < %s | FileCheck %s --check-prefix=ARM64

@message = global [80 x i8] c"The LLVM Compiler Infrastructure\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@temp = common global [80 x i8] zeroinitializer, align 16

define void @t1() {
; ARM64-LABEL: t1:
; ARM64:       ; %bb.0:
; ARM64-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill
; ARM64-NEXT:    .cfi_def_cfa_offset 16
; ARM64-NEXT:    .cfi_offset w30, -8
; ARM64-NEXT:    .cfi_offset w29, -16
; ARM64-NEXT:    adrp x8, _message@PAGE
; ARM64-NEXT:    add x0, x8, _message@PAGEOFF
; ARM64-NEXT:    mov w8, wzr
; ARM64-NEXT:    mov x2, #80 ; =0x50
; ARM64-NEXT:    uxtb w1, w8
; ARM64-NEXT:    bl _memset
; ARM64-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload
; ARM64-NEXT:    ret
  call void @llvm.memset.p0.i64(ptr align 16 @message, i8 0, i64 80, i1 false)
  ret void
}

declare void @llvm.memset.p0.i64(ptr nocapture, i8, i64, i1)

define void @t2() {
; ARM64-LABEL: t2:
; ARM64:       ; %bb.0:
; ARM64-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill
; ARM64-NEXT:    .cfi_def_cfa_offset 16
; ARM64-NEXT:    .cfi_offset w30, -8
; ARM64-NEXT:    .cfi_offset w29, -16
; ARM64-NEXT:    adrp x8, _temp@GOTPAGE
; ARM64-NEXT:    ldr x0, [x8, _temp@GOTPAGEOFF]
; ARM64-NEXT:    adrp x8, _message@PAGE
; ARM64-NEXT:    add x1, x8, _message@PAGEOFF
; ARM64-NEXT:    mov x2, #80 ; =0x50
; ARM64-NEXT:    bl _memcpy
; ARM64-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload
; ARM64-NEXT:    ret
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 @temp, ptr align 16 @message, i64 80, i1 false)
  ret void
}

declare void @llvm.memcpy.p0.p0.i64(ptr nocapture, ptr nocapture, i64, i1)

define void @t3() {
; ARM64-LABEL: t3:
; ARM64:       ; %bb.0:
; ARM64-NEXT:    stp x29, x30, [sp, #-16]! ; 16-byte Folded Spill
; ARM64-NEXT:    .cfi_def_cfa_offset 16
; ARM64-NEXT:    .cfi_offset w30, -8
; ARM64-NEXT:    .cfi_offset w29, -16
; ARM64-NEXT:    adrp x8, _temp@GOTPAGE
; ARM64-NEXT:    ldr x0, [x8, _temp@GOTPAGEOFF]
; ARM64-NEXT:    adrp x8, _message@PAGE
; ARM64-NEXT:    add x1, x8, _message@PAGEOFF
; ARM64-NEXT:    mov x2, #20 ; =0x14
; ARM64-NEXT:    bl _memmove
; ARM64-NEXT:    ldp x29, x30, [sp], #16 ; 16-byte Folded Reload
; ARM64-NEXT:    ret
  call void @llvm.memmove.p0.p0.i64(ptr align 16 @temp, ptr align 16 @message, i64 20, i1 false)
  ret void
}

declare void @llvm.memmove.p0.p0.i64(ptr nocapture, ptr nocapture, i64, i1)

define void @t4() {
; ARM64-LABEL: t4:
; ARM64:       ; %bb.0:
; ARM64-NEXT:    adrp x8, _temp@GOTPAGE
; ARM64-NEXT:    ldr x9, [x8, _temp@GOTPAGEOFF]
; ARM64-NEXT:    adrp x8, _message@PAGE
; ARM64-NEXT:    add x8, x8, _message@PAGEOFF
; ARM64-NEXT:    ldr x10, [x8]
; ARM64-NEXT:    str x10, [x9]
; ARM64-NEXT:    ldr x10, [x8, #8]
; ARM64-NEXT:    str x10, [x9, #8]
; ARM64-NEXT:    ldrb w8, [x8, #16]
; ARM64-NEXT:    strb w8, [x9, #16]
; ARM64-NEXT:    ret
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 @temp, ptr align 16 @message, i64 17, i1 false)
  ret void
}

define void @t5() {
; ARM64-LABEL: t5:
; ARM64:       ; %bb.0:
; ARM64-NEXT:    adrp x8, _temp@GOTPAGE
; ARM64-NEXT:    ldr x9, [x8, _temp@GOTPAGEOFF]
; ARM64-NEXT:    adrp x8, _message@PAGE
; ARM64-NEXT:    add x8, x8, _message@PAGEOFF
; ARM64-NEXT:    ldr x10, [x8]
; ARM64-NEXT:    str x10, [x9]
; ARM64-NEXT:    ldr x10, [x8, #8]
; ARM64-NEXT:    str x10, [x9, #8]
; ARM64-NEXT:    ldrb w8, [x8, #16]
; ARM64-NEXT:    strb w8, [x9, #16]
; ARM64-NEXT:    ret
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 @temp, ptr align 8 @message, i64 17, i1 false)
  ret void
}

define void @t6() {
; ARM64-LABEL: t6:
; ARM64:       ; %bb.0:
; ARM64-NEXT:    adrp x8, _temp@GOTPAGE
; ARM64-NEXT:    ldr x9, [x8, _temp@GOTPAGEOFF]
; ARM64-NEXT:    adrp x8, _message@PAGE
; ARM64-NEXT:    add x8, x8, _message@PAGEOFF
; ARM64-NEXT:    ldr w10, [x8]
; ARM64-NEXT:    str w10, [x9]
; ARM64-NEXT:    ldr w10, [x8, #4]
; ARM64-NEXT:    str w10, [x9, #4]
; ARM64-NEXT:    ldrb w8, [x8, #8]
; ARM64-NEXT:    strb w8, [x9, #8]
; ARM64-NEXT:    ret
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 @temp, ptr align 4 @message, i64 9, i1 false)
  ret void
}

define void @t7() {
; ARM64-LABEL: t7:
; ARM64:       ; %bb.0:
; ARM64-NEXT:    adrp x8, _temp@GOTPAGE
; ARM64-NEXT:    ldr x9, [x8, _temp@GOTPAGEOFF]
; ARM64-NEXT:    adrp x8, _message@PAGE
; ARM64-NEXT:    add x8, x8, _message@PAGEOFF
; ARM64-NEXT:    ldrh w10, [x8]
; ARM64-NEXT:    strh w10, [x9]
; ARM64-NEXT:    ldrh w10, [x8, #2]
; ARM64-NEXT:    strh w10, [x9, #2]
; ARM64-NEXT:    ldrh w10, [x8, #4]
; ARM64-NEXT:    strh w10, [x9, #4]
; ARM64-NEXT:    ldrb w8, [x8, #6]
; ARM64-NEXT:    strb w8, [x9, #6]
; ARM64-NEXT:    ret
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 @temp, ptr align 2 @message, i64 7, i1 false)
  ret void
}

define void @t8() {
; ARM64-LABEL: t8:
; ARM64:       ; %bb.0:
; ARM64-NEXT:    adrp x8, _temp@GOTPAGE
; ARM64-NEXT:    ldr x9, [x8, _temp@GOTPAGEOFF]
; ARM64-NEXT:    adrp x8, _message@PAGE
; ARM64-NEXT:    add x8, x8, _message@PAGEOFF
; ARM64-NEXT:    ldrb w10, [x8]
; ARM64-NEXT:    strb w10, [x9]
; ARM64-NEXT:    ldrb w10, [x8, #1]
; ARM64-NEXT:    strb w10, [x9, #1]
; ARM64-NEXT:    ldrb w10, [x8, #2]
; ARM64-NEXT:    strb w10, [x9, #2]
; ARM64-NEXT:    ldrb w8, [x8, #3]
; ARM64-NEXT:    strb w8, [x9, #3]
; ARM64-NEXT:    ret
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 @temp, ptr align 1 @message, i64 4, i1 false)
  ret void
}

define void @test_distant_memcpy(ptr %dst) {
; ARM64-LABEL: test_distant_memcpy:
; ARM64:       ; %bb.0:
; ARM64-NEXT:    stp x28, x27, [sp, #-16]! ; 16-byte Folded Spill
; ARM64-NEXT:    sub sp, sp, #2, lsl #12 ; =8192
; ARM64-NEXT:    .cfi_def_cfa_offset 8208
; ARM64-NEXT:    .cfi_offset w27, -8
; ARM64-NEXT:    .cfi_offset w28, -16
; ARM64-NEXT:    mov x8, sp
; ARM64-NEXT:    mov x9, #8000 ; =0x1f40
; ARM64-NEXT:    add x8, x8, x9
; ARM64-NEXT:    ldrb w8, [x8]
; ARM64-NEXT:    strb w8, [x0]
; ARM64-NEXT:    add sp, sp, #2, lsl #12 ; =8192
; ARM64-NEXT:    ldp x28, x27, [sp], #16 ; 16-byte Folded Reload
; ARM64-NEXT:    ret
  %array = alloca i8, i32 8192
  %elem = getelementptr i8, ptr %array, i32 8000
  call void @llvm.memcpy.p0.p0.i64(ptr %dst, ptr %elem, i64 1, i1 false)
  ret void
}
