; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -mtriple=arm64-apple-ios | FileCheck %s

; Can't fold the increment by 1<<12 into a post-increment load
; rdar://10301335

@test_data = common global i32 0, align 4

define void @t() nounwind ssp {
; CHECK-LABEL: t:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:  Lloh0:
; CHECK-NEXT:    adrp x9, _test_data@GOTPAGE
; CHECK-NEXT:    mov x10, #268435456 ; =0x10000000
; CHECK-NEXT:    mov x8, xzr
; CHECK-NEXT:  Lloh1:
; CHECK-NEXT:    ldr x9, [x9, _test_data@GOTPAGEOFF]
; CHECK-NEXT:    movk x10, #8, lsl #32
; CHECK-NEXT:  LBB0_1: ; %for.body
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldr w11, [x8, x10]
; CHECK-NEXT:    add x8, x8, #1, lsl #12 ; =4096
; CHECK-NEXT:    cmp w8, #200, lsl #12 ; =819200
; CHECK-NEXT:    str w11, [x9]
; CHECK-NEXT:    b.ne LBB0_1
; CHECK-NEXT:  ; %bb.2: ; %for.end
; CHECK-NEXT:    ret
; CHECK-NEXT:    .loh AdrpLdrGot Lloh0, Lloh1
entry:
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %0 = shl nsw i64 %indvars.iv, 12
  %add = add nsw i64 %0, 34628173824
  %1 = inttoptr i64 %add to ptr
  %2 = load volatile i32, ptr %1, align 4096
  store volatile i32 %2, ptr @test_data, align 4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 200
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  ret void
}
